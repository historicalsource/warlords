	.TITLE WDINT
	.RADIX 16
	.ASECT
	.ENABLE	AMA
	.GLOBL EOPROG,APROGT
	.GLOBL GCKS5
	.GLOBL CKS5
	.INCLUDE WDCOMN	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.INCLUDE HLL65	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.SBTTL INTERRUPT
	.CSECT
;ENTERED 4 TIMES/FRAME, AT LINES 64, 128, 192, & 240.
IRQ:	PHA			;SAVE REGS
	TXA
	PHA
	TYA
	PHA
	CLD			;SET HEX
	.SBTTL	SOFTWARE WATCHDOG
;BELOW CODE CHECKS S.P., P.C. & PSW FOOR VALIDITY
	TSX			;X <- SP
	BPL ABORT		;STACK TOO DEEP, ABORT
	LDA AX,104		;GET OLD PSW
	AND I,10		;BREAK?
	BNE ABORT		;YES, ABORT
	LDA AX,106		;PCH
;
	CMP I,PROG/100		;CHECK LOW LIMIT
APROGT	=.-1			;ADDRESS OF PROGRAM TEST
	BCC ABORT
	LDA AX,105
	CMP I,0
	.=.-1
	.WORD MOOLAH
	.=.-1
	LDA AX,106
	SBC I,0
	.=.-1
	.ENABL M68
	.WORD MOOLAH
	.DSABL M68
	.=.-1

;ABOVE 12 LINES DOES A D.P. COMPARE OF PC:FTAB

	BCC IRQCON		;IF BORROW, P.C. IS IN BOUNDS
				;*** TEST ONLY
ABORT:	JMP ABORT		;ABORT ENTRY, DO POWER-ON
CKS5:	.BYTE GCKS5
IRQCON:
	LDA SYNC		;CHECK SYNC WORD
	BMI ABORT

;IF SYNC >= 80, PROCESSOR IS IN "PHANTOM-LOOP"

	INC $INTCT		;COUNT INTERRUPTS
	BIT R.VBLNK
	IFVS			;?D6 ON==>END SCREEN
				;---------
	LDA $INTCT		; YES, AT ENDSCREEN.
	AND I,0FC		;PHASE LOCK FOR LED'S
	STA $INTCT
	DEC FIELD		;COUNT FIELDS
	IFMI
	LDA I,0			;1 FIELD'S PER FRAME
	STA FIELD		;(0)
	INC SYNC		;SYNC UP MAINLINE
	ENDIF
	.SBTTL	MOVE MOTION OBJECT PARAMS.
MOTUP:
	LDX I,MOTNUM-1	;OBJ. 0-11, 1 BYTES @
	BEGIN
	LDA X,HORDIS
	STA AX,M.HPOS		;OUT TO HARDWARE
	LDA X,VERDIS		;THIS ONE'S PRE-ADJUSTED
	STA X,M.VPOS		;CORRECT OR BLANKED, OUT TO HDW.
	LDA X,SVBPIC
	STA X,M.HPICT
	DEX
	MIEND			;WHILE OBJ # >=0
	LDA DG.COM
	IFNE			;?UPDATE DRAGON PICS?
	LDX I,7
	BEGIN			;LOOP THRU DRAGONS SHAPES
	LDA X,DGPDIS
	STA X,M.HPICT+8
	LDA X,DGXDIS
	STA X,M.HPOS+8
	LDA X,DGYDIS
	STA X,M.VPOS+8
	DEX
	MIEND
	ENDIF
				;---
				;---
				;MUX TOP QUARTER OF SCREEN
				;---
				;---
	ENDIF
	.SBTTL	MUX OBJECT
MUX30:	
			;NO MUXING
	.SBTTL	HANDLE ABUSE ALARM
	LDA R.SLAM
	AND I,10
	IFEQ			;SLAM OFF ==> SOUNDS OFF
	LDA I,0FF		;SLAM ON ==> TURN ON ABUSE ALARM
	STA ABUSE
	ENDIF
25$:	LDA ABUSE
	IFNE			;IF ABUSE IS ON, THEN
	DEC ABUSE		;TIME OUT THE ALARM
	AND I,1F
	ORA I,8
	STA P.AFRQ1
	LDY I,0AF
	STY P.AFRQ1+1
	LDA ABUSE
	IFEQ			;?ABUSE TIMER JUST FINISHED?
	STA P.AFRQ1+1		;THEN SHUT UP ALARM
	ENDIF
	ENDIF

	.SBTTL	HANDLE INPUTS
	DEC PT.INT
	IFMI			;?TIME TO READ POTS?
	LDA I,4			;C 5 INT TIMES==>20.7 MILS
	STA PT.INT
	JSR POTS
	ENDIF
M20:	JSR TBREAD ; READ THE COUNTERS, SWITCHES, POTS, WHATEVER.
	JSR DEBNCE ; DEBOUNCE THE SWITCHES WE JUST READ
	JSR MOOLAH		;COIN ROUTINE
	LDA $CCTIM
	STA W.CTR1
	LDA $CCTIM+1
	STA W.CTR2
	LDA $CCTIM+2
	STA W.CTR3
2$:	STA A,INTACK		;ACKNOWLEDGE INTERRUPTS

IRQRET:				;---
	PLA
	TAY
	PLA
	TAX
	PLA
	RTI			;RTI=40 HEX, USED TO TEST TEST SW.

				;---
	.SBTTL	DE-BOUNCE SWITCHES
;NOTE-SWITCHES ARE LOW-TRUE (107 CYCLES, INCL JSR)
DEBNCE:	LDX I,3
1$:	LDY ZX,INPUT		;READ SWITCHES
	LDA ZX,DBSW		;SAVE OLD SWITCHES
	STY ZX,DBSW		;REPLACE WITH NEW
	TAY			;COPY OLD
	AND ZX,DBSW		;MAKE ONES WHERE BOTH OFF
	ORA ZX,SWSTAT
	STA ZX,SWSTAT		;TURN OFF IN STATUS
	TYA			;GET BACK OLD
	ORA ZX,DBSW		;MAKE ZEROES WHERE BOTH ON
	AND ZX,SWSTAT		;TURN ON IN STATUS
	STA ZX,SWSTAT		;SAVE NEW STATUS
	DEX
	BPL 1$
	RTS
	.PAGE

	.SBTTL POWER-ON-RESET
RESET:
	SEI
	LDX I,0FF
	TXS			;SET UP STACK	
	STA INTACK ;START UP INTERRUPTS
;NOW FALL THROUGH TO CLEAR RAM, FOR BOTH GAME AND TEST
	.SBTTL SELF-TEST
STEST:	CLD
	LDX I,0
	TXA
1$:	STA ZX,0
	STA X,100		;ZERO OUT VARIABLES
	STA AX,SCRFLD
	STA X,SCRFLD+100
	STA X,SCRFLD+200
	STA X,SCRFLD+300
	STA X,W.CTR1
	STA X,P.BASE
	DEX
	BNE 1$
	LDA R.TEST
	BIT M20
	BEQ TREPT
	JMP START		;ELSE GO TO GAME MODE

	.SBTTL	ZERO-PAGE TEST
TREPT:	LDY I,0			;LOOP REG Y THRU PAGE
10$:				;---
				;VERIFY THAT CURRENT LOC IS STILL ALL ZERO
	STA WTCHDG
	LDA Y,0
	ORA Y,100
	ORA Y,SCRFLD
	ORA Y,SCRFLD+100
	ORA Y,SCRFLD+200
	ORA Y,SCRFLD+300
	BNE 32$			;ERROR IF NOT ALL ZERO
	LDA I,80		;TEST PATTERN IS 9-BIT WALKING ONE
	CLC			;D8 IS ZERO
20$:	TAX			;SAVE THE NEW MASTER TEST PATTERN
	TXS
30$:
	STA Y,0			;STORE EACH SEED
	ROR
	STA Y,100
	ROR
	ROR
	ROR
	STA Y,SCRFLD
	ROR
	STA Y,SCRFLD+100
	ROR
	STA Y,SCRFLD+200
	ROR
	STA Y,SCRFLD+300
	ROR			;CYCLE PATTERN BACK TO START
	ROR
	EOR Y,0			;TEST FOR THE SEED
	BNE 60$			;EXIT IF ERROR
	TXA
	ROR			;GET THE NEXT SEED
	TAX
	EOR Y,100
32$:	BNE 60$			;ALSO USED AS TRANSFER FOR LONG JUMP
	TXA
	ROR
	ROR
	ROR
	TAX
	EOR Y,SCRFLD
	BNE 60$
	TXA
	ROR
	TAX
	EOR Y,SCRFLD+100
	BNE 60$
	TXA
	ROR
	TAX
	EOR Y,SCRFLD+200
	BNE 60$
	TXA
	ROR
	TAX
	EOR Y,SCRFLD+300
	BNE 60$
	TXA			;GET BACK TO CURRENT PATTERN
	ROR
	ROR			;REMEMBER TO KEEP CARRY INVOLVED
				;---
	BCC 40$			;ALTERNATE WALKING ZERO WITH
	BEQ 40$			;  WALKING ONES
				;---
	TSX			;JUST FINISHED EITHER WALKING ZERO OR SETTING ALL BITS ON
	BEQ 45$			;B FINISHED SETTING ALL BITS ON
	TXA			;ELSE WALK THE PATTERN AROUND
	CLC
	ROR
	JMP 20$			;DO THE NEXT WALKING ONE (BPL-ALWAYS)
40$:				;---
	CMP I,1			;JUST FINISHED WALKING ONE
42$:	EOR I,0FF		;COMPLEMENT TEST PATTERN FOR WALKING ZERO
	BEQ 42$			;PATTERN=0==>CYCLED THRU ALL TESTS SO STORE ALL ON
				;>>>>THEN TEST NEXT LOC
	TAX
	JMP 30$			;ELSE, TRY THE PATTERN (BNE-ALWAYS)
45$:				;---
	INY			;PREPARE TO TEST NEXT LOCATION
	BEQ 50$			;TESTED ALL OF MEMORY-ITS OK
	JMP 10$			;ELSE TEST NEXT LOCATION (BNE-ALWAYS)
				;---
				;ZERO RAM BACK OUT
				;DID MEMORY RETAIN THE 0FF PATTERN?
	LDX I,1			;ENTER WITH X=1, ALL RAM TO 0FF
50$:	BEGIN
	INC X,0
	BNE 60$
	INC X,100
	BNE 60$
	INC X,SCRFLD
	BNE 60$
	INC X,SCRFLD+100
	BNE 60$
	INC X,SCRFLD+200
	BNE 60$
	INC X,SCRFLD+300
	BNE 60$
	INX
	EQEND
	LDX I,RAMOK-ERMSG
	BNE 65$			;ALWAYS
60$:	LDX I,BADRAM-ERMSG	;BAD RAM
65$:
	LDY I,80-16.
	.SBTTL	REPORT MEMORY STATUS
MEMREP:
	BEGIN
	LDA X,ERMSG		;X-->OFFSET MESSAGE FAST ERMSG
	INX
	LSR			;(C=1)==>END OF MESSAGE
	INY
	BIT R.FLIP		;CHECK FOR REFLECT
				;ASSUME STRAIGHT FORWARD
	IFMI			;?MIRROW FLIPPED?
	DEY
	DEY			;THEN WRITE BACKWARDS
	EOR I,40		;WITH BACKWARDS STAMPS
	ENDIF
	STA Y,SCRFLD+32.-80
	CSEND			;(C=1)==>END OF MESSAGE
	TYA			;(Y>80)==>LAST MESSAGE
	BMI PATSCN
				;ELSE FAL THRU, TEST ROM

	.SBTTL	ROM TEST
ROMTST:	LDX I,0			;PROG STARTS ON EVEN PG.
	STX ADL			;LOW ADDRESS PTR
	TXS			;START S:=0
	LDA I,PROG&0FF00/100	;HIGH BYTE OF PROG ADDR
	STA ADH			;HIGH ADDRESS PTR
	LDX I,47.		;48 PAGES OF ROM(12K)
	LDA I,21		;SEED FOR L.R.C.
	STA K			;GET SOMETHING IN EACH  NYBBLE (21,43,65...)
10$:	LDY I,0
	STX A,WTCHDG		;MUZZLE DOG
1$:	EOR NY,ADL		;LONGITUDINAL PARITY
	INY
	BNE 1$			;LOOP FOR 1 PAGE
	TAY			;SAVE LRC
	TXA
	AND I,7			;3 LSB=PAGE IN ROM
	CMP I,1			;CLEAR CARRY IF END OF ROM
	TYA			;PUT LRC BACK
	BCS 3$			;SKIP IF IN ROM
	BEQ 2$			;SKIP IF OK
	PHA			;ELSE SNAP FOR ANALYZER
2$:
	LDA K			;LAST BLOCK (IF 16K) HAS SEED OF 0
;	(CLC)			;BUT SINCE THIS IS RUNNING, IT MUST BE
				;IN CORRECT SLOT
	ADC I,22		;EACH 1K HAS DIFFERENT SEED
	STA K
3$:	INC ADH			;BUMP PTR
	DEX			;COUNT PAGES
	BPL 10$
	TSX			;HAS S CHANGED (ANY PUSHES?)
	BEQ 4$			;NO, OK
	LDX I,BADROM-ERMSG	;ELSE POINT TO "BAD ROM"
	BNE 5$			;** ALWAYS **
4$:	LDX I,ROMOK-ERMSG	;ROM OK
5$:	LDY I,80+16.
	BNE MEMREP		;(ALWAYS)
	.SBTTL	PATTERN SCREEN
PATSCN:	LDX I,0
1$:	TXA
	STA AX,SCRFLD+100
	STA AX,SCRFLD+200
	STA AX,SCRFLD+300
	INX
	BNE 1$
	TXS			;S=0==>IN-LINE SUBROUTINES
	LDA I,0
	STA P.INIT
	STA P.ACTL
				;---
	LDX I,0F		;PREPARE CHARACTERS (4 SETS OF 4) TO REPRESENT THE
	LDA I,5
20$:
	STA AX,M.HPICT
	DEX			;
	BPL 20$			;
				;---
	LDA I,3
	STA P.INIT

	.SBTTL	SWITCH TEST
SWTEST:				;---
				;FIRST, READ THE SWITCHES AND TBALL COUNTERS
				;
	STA WTCHDG
	.SBTTL	READ TBALL COUNTERS ET AL.
TBREAD:				;---
	LDA R.BYT3
	STA INPUT+3
				;---
				;---
	LDA R.BYT0
	AND I,37		;FORCE SW8,7,4 OFF - COCKTAIL
	STA INPUT+0
				;---
	LDA R.BYT2
	STA INPUT+2
	IFMI			;?TURN ON SW8,7,4?
	LDA INPUT+0
	ORA I,0C8
	STA INPUT+0
	ENDIF
	LDA R.BYT1
	STA INPUT+1
	TSX
	BPL 63$
	RTS
63$:
POTS:
	LDX I,3
	BEGIN			;LOOP READING THE POTS
	LDA X,P.POT
	STA IJ
	LDA X,PT.CTR		;TEST ROUTINE USE
	SEC
	SBC IJ
	TAY
	CMP I,2
	IFCS			;?CHANGED BY MORE THAN ONE?
	EOR I,0FF
	IFNE			;?AND MORE THAN MINUS ONE?
	LDA IJ			;MAINLINE USE
	STA X,PT.CTR
	TYA			;TEST ROUTINE USE
	STA X,M.COL
	ENDIF
	ENDIF
	DEX
	MIEND
	STA P.POTGO
	TSX
	IFMI
	RTS
	ENDIF
	.SBTTL	SWITCH TEST CALCULATIONS
				;---
	LDY K
	LDX I,0			;CLR X
	LDA R.BYT3		;
	SEC			;8 SWITCHES
	ROL
1$:	BCS 2$
	INX			;COUNT 0'S
2$:	ASL			;SHIFT TO NEXT SW
	BNE 1$			;IF THERE IS ONE
	LDA R.TEST		;OTHER SWITCHES
				;TEST SW?
	BIT M20
	BEQ 25$
	JMP RESET		;ELSE RESET TO GAME
25$:
;AT THIS POINT, X CONTAINS THE # OF SWITCHES CLOSED
	TXA			;SAVE X
	AND I,0F		;LIMIT TO 15 INPUTS
	STA K
	CLC			;FLAG "NO CHANGE"
5$:	DEX
	BMI 6$			;X OUT, HOW'S Y DOING
	DEY			;ELSE MATCH DEX WITH DEY
	BPL 5$			;EQUAL SO FAR, LOOP
	BMI 7$			;ELSE Y WAS LESS, BEEP

6$:	DEY
	BMI 8$			;X=Y, NO SOUND
7$:	SEC			;COME HERE TO BEEP
8$:
;IF A SWITCH CHANGED, BUMP THE MOTION OBJECT PTR FOR BELOW TEST
	LDA J
	ADC I,0			;ADDS 1, IF CARRY IS SET
	AND I,0F		;KEEP IT A VALID OBJECT PTR
	STA J

				;
				;---
	LDA I,0AF
	STA P.AFRQ1+1
	LDA K
	ASL
	ASL
	ASL
	STA P.AFRQ1
TBTMOV:
	LDY J
	LDX I,3
	BEGIN
	LDA X,M.COL		;NEGATIVE DIFFERENCE IN POT READING
	ASL X,TPTFLP		;POT FLIPS
	IFCS
	EOR I,0FF
	ENDIF
	ADC Y,M.VPOS
	STA Y,M.VPOS
	LDA X,M.COL
	LSR X,TPTFLP
	IFCS
	EOR I,0FF
	ENDIF
	ADC Y,M.HPOS
	STA Y,M.HPOS
	LDA I,0			;RESET DELTA FOR NEXT LOOP
	STA X,M.COL
	DEX
	MIEND
;NOW DISPLAY CODE IN OPTION SWITCHES
	LDY I,3*32.+16.
	LDX I,3
	BEGIN
	TXS
	LDX I,7
	BEGIN
	TXA
	TSX
	ROL X,INPUT
	TAX
	LDA I,41		;(='0')ASSUME OFF (HI)
	IFCC			;?SWITCH ON (LOW)?
	LDA I,42		;THEN WRITE '1'
	ENDIF
	INY			;ASSUME STRAIGHT FORWARD
	BIT R.FLIP
	IFMI			;?MIRROW REFLECTED?
	DEY
	DEY			;THEN WRITE OPPOSITE WAY
	EOR I,40		;WITH FLIPPED STAMPS
	ENDIF
	STA Y,3*32.+SCRFLD
	DEX
	MIEND
	TYA
	SEC
	SBC I,32.+8.
	BIT R.FLIP
	IFMI			;?MIRROW REFLECTED?
	CLC
	ADC I,8+8			;THEN CORRECT FOR WRITING BACKWARDS
	ENDIF
	TAY
	TSX			;NOTE:S MUST EXIT POSITIVE
	DEX
	MIEND
				;---
				;WAIT A WHILE
	LDX I,1			;PAUSE 2 FRAMES FOR POKEY
	BEGIN			;LOOP THRU EACH FRAME
	BEGIN			;LOOP UNTIL VBLANK DONE
	BIT R.VBLNK
	VCEND
	BEGIN			;LOOP UNTIL VBLANK STARTS
	BIT R.VBLNK
	VSEND
	DEX
	MIEND
	JMP SWTEST		;LOOP WHILE TEST SW IS ON
ERMSG=.-1			;FORCE FIRST OFFSET .GT. ZERO
BADROM:	.ASCPF <BAD ROM>
ROMOK:	.ASCPF <ROM OK>
BADRAM:	.ASCPF <BAD RAM>
RAMOK:	.ASCPF <RAM OK>
TPTFLP:	.BYTE 0F,0FF,0,0F0
EOPROG:	.REPT 100
	.BYTE 0FF
	.ENDR
	.VCTRS 7FFA,RESET,RESET,IRQ
	HLL65
	.END
1                                                                                                                                                                                                                                                                                  