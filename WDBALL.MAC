	.TITLE WDBALL
	.RADIX 16
	.ASECT
	.ENABLE AMA
	.SBTTL ******************************
	.SBTTL * PROGRAMER: GREG R          *
	.SBTTL *                            *
	.SBTTL * CHECKER:                   *
	.SBTTL *                            *
	.SBTTL ******************************
	.IF NE,0

DATE INITIATED: MAY,1980
PROJECT CHARGE #: 290XX
DISK #:	75 & B20
HARDWARE REQUIREMENTS:	MONSTER-MAN PCB, CONSISTING OF BASIC MOC16

MEMORY REQUIREMENTS:	512 BYTES WORKING RAM
			960 BYTES SCROLL-FIELD RAM
			 64 BYTES MOTION-OBJECT PARAMETERS

			 8K BYTES PROGRAM ROM

INTERRUPT REQUIREMENTS:	FOUR IRQ'S PER FRAME. THESE ARE ON THE
			FALLING EDGE OF 32V.

ASSEMBLY COMMAND STRING:*WDBALL,WDBALL=WDBALL/C

LINK COMMAND STRING:*DK1:WDBALL/L,DK1:WDBALL=WDBALL,WDRAGN,WDSND,WDCOIN,WDINT,WDCKSM

PROGRAM DESCRIPTION: MAIN PROGRAM FOR "WARLORDS". USES TABLES
	.ENDC
	.GLOBL RIP.A ;RIPOFF PROTECT (13 IS OK, ELSE RIPPED OFF)
	.GLOBL GCKS0,GCKS1,GCKS2,GCKS3,GCKS4
	.GLOBL CKS0,CKS1,CKS2,CKS3,CKS4
	.INCLUDE WDCOMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.INCLUDE HLL65		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.MACRO ...STK ...1
	...1'0=0
	.ENDM
	.MACRO ...PUT ...1,...2,...3
	...1'...2=...3
	.ENDM
	.MACRO ...GET ...1,...2,...3
	...3=...1'...2
	.ENDM
	.MACRO ...PSH ...1,...2
	...1'0=...1'0+1
	...PUT ...1,\...1'0,<'...2'>
	.ENDM
	.MACRO ...POP ...1,...2
	...GET ...1,\...1'0,...2
	...1'0=...1'0-1
	.ENDM

	.MACRO .SWORD
	...STK ...W
	.ENDM
	.MACRO .SPLIT ...1
	...PSH ...W,<'...1'>
	.ENDM
	.MACRO .DMPH
	...1=0
	.REPT ...W0
	...1=...1+1
	...GET ...W,\...1,...2
	.BYTE ...2/100&0FF
	.ENDR
	.ENDM
	.MACRO .DMPL
	...1=0
	.REPT ...W0
	...1=...1+1
	...GET ...W,\...1,...2
	.BYTE ...2&0FF
	.ENDR
	.ENDM

	.SBTTL INITIALIZE
	.=PROG
	.SBTTL "MAIN-LOOP"
WAITFRAME:
WAIT:	BEGIN
	BEGIN
	
	LSR SYNC
	CSEND
	STA A,WTCHDG
	TSX			;TEST FOR CONTINUE ON STACK
	INX
	IFNE			;PHASE REQUEST WAITFRAME
	RTS			;RESUME THE FRAME
	ENDIF
	INC FRAME
	IFEQ
	INC FRAME+1
	IFEQ			;STICK AFTER 8 MINUTES
	LDA I,80
	STA FRAME+1
	ENDIF
	ENDIF
	LDA $$CRDT
	CMP I,54.		;SOFTWARE GLITDES?
	BCS APAT1		;B  RESET GAME
	CMP I,36.		;WORST CASE 2 COINS
	IFCS			;?TOO MANY CREDITS?
	LDA I,35.		;LIMIT IT DOWN
	STA $$CRDT
	ENDIF
	JSR MODSND
	JSR DRAGON
START:
	JSR GAME
	LDA SWSTAT+2		;CHECK THE DE-GLITCHED TEST SWITCH
	AND I,20
	EOR GARBGE		;DETECT RAMPANT SOFTWARE
	EQEND
APAT1:	BRK		;FAKE RESET
CKS0:	.BYTE GCKS0

	.SBTTL GAME MASTER CONTROL

GAME:
	LDX PHASE
	BMI DOGAME		;C 80 OR HIGHER
	LDA X,PTAB+1
	PHA
	LDA X,PTAB
	PHA
	RTS
PTAB:	.WORD INIT-1		;
	.WORD INCOIN-1		;2-INPUT COIN
	.WORD IN2COIN-1		;4-WAITING FOR 2 COIN MIN
	.WORD SGAMEA-1		;6-START GAME PHASE A
	.WORD SGAMEB-1		;8 START GAME PHASE B
	.WORD EGAME-1		;0A END GAME
	.WORD EXTACT-1		;0C EXIT ACT
	.WORD BGNACT-1		;0E BEGIN ACT
	.WORD HISCORE-1		;10 PROCESS NEW HISCORE
	.WORD NXTNAM-1		;12-GET NEXT NAME
	.WORD GETNAM-1		;14-ENTER NAME
DOGAME:
	JSR CPUDO		;DO COMPUTER DRONES
	JSR MVPAD
	LDA FRAME
	AND I,3F
	IFEQ ;?COUNT THE SECONDS?
	LDA BL.FLG+3
	IFEQ			;?SECOND BALL NOT OUT YET?
	DEC LA.CNT		;?PLAYERS WANT 2 BALLS?
	BMI 20$			;B LAUNCH IF PLAYERS ARE GOOD
	ENDIF
	ENDIF
	LDA FRAME
	CMP I,10
	IFEQ
	LDA BL.FLG
	IFEQ			;?NOT YET ALIVE?
	LDA I,80		;LAUNCH FIRST BALL
	STA DG.COM
	ENDIF
	LDA FRAME+1
	CMP I,16. ;WAIT 16.*4 =60 SECONDS
	IFEQ
	LDA BL.FLG+3
	BEQ 20$ ;B SECOND BALL MUST BE OUT BY NOW
	ENDIF
	LDA FRAME+1
	CMP I,19		 ;90 SECONDS
	IFCS
	IFEQ
	LDA BL.FLG+2
	BEQ 20$
	ELSE
	AND I,7 ; EVERY 30 SECONDS
	IFEQ
20$:	;LAUNCH BALL
	LDX I,3
	JSR LAUNCH
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	JSR TRAVEL
	JSR EXPLODE
	JSR LVDRW
	JSR VALROL
	JSR SHOWVL
	RTS
INCOIN:
	LDA FRAME
	IFEQ
	LDA FRAME+1
	CMP I,16.
	IFCS
	JSR RSF
	JSR BSINIT
	JSR CSINIT
	JSR LVDRW
	JSR SHOWVL
	JSR DRWHI
	JSR KILBAL
	LDX I,0
	JSR LAUNCH
	JSR REGDRW
	ENDIF
	ENDIF
	JSR TRAVEL
	JSR BLINK
	JSR LVDRW
	JSR SHOWVL
	JSR LEDOFF
	LDA SWSTAT
	AND I,8
	STA J
	JSR CREDPL
	IFEQ			;?1 CREDIT PER PLAYER?
	LDA I,10
	STA J
	ENDIF
	LDA FRAME
	ASL
	LDA FRAME+1
	ROL
	AND I,7
	ORA J			;1-2 PLAYERS OR 1-4 PLAYERS
	TAX
	LDA $CMODE
	AND I,3
	IFEQ			;?FREE PLAY?
	JSR LEDFAL
	LDY I,MS.BGN
	LDA SWSTAT+3
	AND I,0F
	EOR I,0F
	IFNE			;?ANY SWITCHES PRESENT?
	LDA I,4			;4 COIN MIN
	STA $$CRDT
	ENDIF
	ELSE			;PAY FOR PLAY-NORMAL MESSAGE
	LDY X,TICMES
	ENDIF
	LDA $$CRDT
	BNE 20$			;B GOT A COIN
	LDA FRAME
	ASL
	EOR I,0FE
	IFEQ			;?END OF LAST MESSAGE?
20$:
	JSR CLRMES
	JSR REGDRW
	JSR DRWHIA
	ELSE			;ELSE TYPE CURRENT MESSAGE
	JSR TYPMES
	ENDIF
	LDA $$CRDT
	IFNE			;?GOT A COIN?
	STA O$CNCT
	JSR BSINIT
	LDA I,4			;GOTO IN2COIN--WAIT FOR SECOND COIN
	STA PHASE
	LDA I,0FF
	STA ATRACT
	JSR KILBAL
	JSR REGDRW
	JSR CREDRW
	JSR POSDIS
	JSR SNDCOIN
	ENDIF
	RTS
TICMES:				;1-4 PLAYERS
	.BYTE MS.GOI,MS.1PC,MS.1PB,MS.2PC
	.BYTE MS.2PB,MS.GOI,MS.3PC,MS.4PC
				;1-2 PLAYERS ONLY
	.BYTE MS.GOI,MS.1PC,MS.1PB,MS.2PC
	.BYTE MS.2PB,MS.GOI,MS.1PC,MS.2PC
				;1 CREDIT PER PLAYER
	.BYTE MS.GOI,MS.1PB,MS.1UP,MS.2PB
	.BYTE MS.1UP,MS.GOI,MS.24U,MS.1UP

CREDPL:				;TESTS FOR 1 CREDIT PER PLAYER
	LDA SWSTAT
	AND I,30		;ISOLATE COINAGE
			;ZERO OUT TO DELETE OPTION, CHANGE CHKSM BELOW
	CMP I,20
	RTS			;(Z=TRUE)==> YES
	.BYTE 30	;KEEP CHECKSUM CORRECT
MES1VS2:
	LDA FRAME
	IFPL			;(POS)==> ONE PLAYER
	LDY I,MS.1BG
	JSR CREDPL
	IFEQ
	LDY I,MS.BGN
	ENDIF
	ELSE			;ELSE (NEG)==> 2 PLAYER MESSAGE
	LDY I,MS.9AC
	JSR CREDPL
	IFEQ
	LDY I,MS.24U
	ENDIF
	ENDIF
	LDA FRAME
	AND I,7F
	EOR I,7F
	IFEQ
	JSR CLRMES
	BIT FRAME
	IFMI			;?WAS 2 PLAYER?
	JSR DRWHI1		;THEN PREPARE FOR 1
	ELSE
	JSR DRWHI2		;ELSE PREPARE FOR 2
	ENDIF
	JSR CREDRW
	ELSE
	JSR TYPMES
	ENDIF
	RTS

IN2COIN:
	JSR MES1VS2
	JSR BLINK
	JSR LVDRW
	JSR SHOWVL
	JSR POSDIS
	LDA SWSTAT
	AND I,20		;ALREADY
	BEQ 20$			;B START IF ONE PLAYER ONE COIN
	LDA $$CRDT
	CMP I,2			;?2 OR MORE COINS?
	BCS 20$			;B THEN BEGIN TO START
				;ELSE ONLY ONE COIN IN
	LDA SWSTAT
	AND I,10		;?2-4 PLAYERS, ONE COIN?
				;OR 1 CREDIT PER PLAYER (1 CREDIT MIN)
	IFEQ			;?BEGIN TO START GAME?
20$:	
	JSR CNMSCLR
	JSR CSWALL
	LDA I,6
	STA PHASE
	LDA $CMODE
	AND I,3
	IFEQ			;?FREE PLAY?
	LDA I,0F		;CATCH WHAT IS PRESSED
	ELSE			;ELSE FORCE A PUSH
	LDA I,0
	ENDIF
	STA PH2TRG
	LDA I,0
	STA PH1EDG
	STA LF.PLA
	JSR SNDCOIN
	ENDIF
	RTS
CNMSCLR:			;CLEAR VARIOUS COIN MESSAGES
	LDY I,MS.1BG
	JSR CLRMES
	LDY I,MS.9AC
	JSR CLRMES
	LDY I,MS.24U
	JSR CLRMES
	RTS
SELECT:
	LDA $$CRDT
	CMP O$CNCT
	IFNE			;?ANOTHER COIN?
	STA O$CNCT
	JSR CNMSCLR
	JSR CREDRW
	LDA I,0
	STA FRAME
	JSR SNDCOIN
	ENDIF
	JSR CREDPL
	IFEQ			;?ONE COIN PER PLAYER?
	LDA $$CRDT
	CMP I,4
	BCC 10$			;B IF NOT ENOUGH COINS FOR VERYBODY
	ENDIF			;ELSE FALL THRU, ALLOW START
	LDA SWSTAT
	AND I,10		;?2-4 PLAYERS ONE COIN?
	BEQ 20$			;B ALLOW START
	LDA $$CRDT
	CMP I,1
	IFEQ			;?ONLY ONE COIN?
10$:				;NOT ENOUGH CREDITS YET
	JSR MES1VS2
	ELSE
20$:
	LDY I,MS.BGN
	LDA FRAME
	AND I,7F
	IFEQ
	JSR CLRMES
	JSR DRWHIA
	ELSE
	JSR TYPMES
	ENDIF
	ENDIF
	LDA SWSTAT+3
	AND I,0F
	TAY
	EOR PH2TRG		;DETECT CHANGES
	AND PH2TRG		;ON DOWNWARD EDGE
	ORA PH1EDG		;SAVE THE EDGE
	STA PH1EDG
	STY PH2TRG		;SAVE THE TRIGGER
	RTS
SGAMEA:
	JSR SELECT
	JSR BLINK
	JSR LVDRW
	JSR SHOWVL
	JSR POSDIS
	JSR LEDFAL		;FLASH ALL LEDS
	LDA PH1EDG
	IFNE			;?SOMEONE FINALLY PUSHED A BUTTON?
	JSR RSF
	JSR BSINIT
	LDX I,3
	BEGIN
	LDA I,0FF		;START WITH NO TROPHIES
	STA X,LF.NUM
	LDA I,0
	STA X,SCOR12
	STA X,SCOR34
	STA X,SCOR56
	STA X,SBUK12
	STA X,SBUK34
	STA X,PD.FLG
	DEX
	MIEND
	LDA I,0
	STA SCOR12+4
	STA SCOR34+4
	STA SCOR56+4
	STA PLAYER		;START ALL DRONES
	STA LV.CUR		;NO DRONE PADDLES YET
	LDA I,1
	STA CP.DSS
	STA CP.PHN
	STA CP.MXS
	STA DG.COM		;START UP DRAGON
	JSR CSWALL
	JSR CASTRT
	LDA I,4A
	BIT SWSTAT
	IFMI
	EOR I,40		;?REFLECTED VIEW?
	ENDIF
	STA SCRNMB
	IFVC			;?FLAT TOP?
	EOR I,0C0
	STA SCRNMT
	ENDIF
	LDA I,8
	STA PHASE
	JSR CREDRW
	JSR DRWHI
	ENDIF
	RTS
SGAMEB:
	JSR SELECT		;SELECT DRONES AND KINGS
	LDA PLAYER		;
	EOR I,0F
	AND PH1EDG
	IFNE			;?WAS A DRONE, WANT A KING?
	LDA SWSTAT
	AND I,30
	BEQ 5$			;B 1 COIN ONLY NEEDED-ADMIT PLAYER
	JSR CREDPL
	IFEQ			;? ONE COIN PER PLAYER?
	LDA LF.PLA
	CMP $$CRDT
	BCS 8$			;B TOO MANY PLAYERS-IGNORE PLAYER
	ENDIF
	LDA $$CRDT		;2 COIN MIN
	CMP I,2
	IFCS
5$:				;ALLOW ONE PLAYER IN
	JSR CASTRT
	ELSE
8$:				;NOT ENOUGH CREDITS-NO ONE ALLOWED IN
	LDA I,0
	STA PH1EDG
	ENDIF
	LDA I,4A
	BIT SWSTAT
	IFMI			;?REFLECTED VIEW?
	EOR I,40
	ENDIF
	STA SCRNMB
	IFVC			;?FLAT TOP?
	EOR I,0C0
	STA SCRNMT
	ENDIF
	ENDIF
	JSR MVPAD
	JSR POSDIS
	JSR LVDRW
	JSR LEDFLD		;FLASH DRONES
	LDA SWSTAT
	AND I,8
	IFNE			;?2 PLAYER MAX?
	LDA PLAYER
	BEGIN
	LSR
	CSEND
	BNE 10$			;B 2 PLAYERS IN
	ENDIF
	LDA PLAYER
	CMP I,0F
	IFEQ			;?4 PLAYERS IN?
10$:
	LDA I,07		;COUNT DOWN FAST
	ELSE
	LDA PH1EDG
	AND PLAYER
	IFNE			;?PLAYERS IMPATIENTLY PRESSING BUTTOM?
	LDA I,0			;COUNT IT ONCE
	STA PH1EDG
	LDA I,1
	ELSE
	LDA I,3F		;ELSE ONE PER SECOND
	ENDIF
	ENDIF
	AND FRAME
	IFEQ			;?TIME TO COUNT DOWN?
	JSR SNDTIK
	DEC SCRNMB
	BIT SWSTAT
	IFVC			;?FLAT TOP?
	DEC SCRNMT
	ENDIF
	LDA SCRNMB
	AND I,3F
	IFEQ			;?TIMED OUT?
	LDA I,0E		;START THE GAME
	STA PHASE
	LDA I,0			;CLEAR OUT BONUS COINS
	STA $BC
	STA $BCCNT
	LDA $CMODE
	AND I,3
	IFEQ			;?FREE PLAY?
	STA $$CRDT		;TURN OFF COINS
	ELSE			;ELSE TREAT COINS CORRECTLY
	JSR CREDPL
	IFEQ			;?ONE COIN PER PLAYER?
	LDA PLAYER
	BEGIN
	LSR
	IFCS
	DEC $$CRDT
	ENDIF
	EQEND			;DONE WHEN NO CREDITS LEFT OR PLAYER SHITED OUT
	ELSE
	DEC $$CRDT
	LDA SWSTAT
	AND I,10
	IFNE			;?2 COINS FOR MULTI PLAYER?
	LDA SWSTAT
	AND I,20		;?ONE PLAYER 2 COINS?
	BNE 20$			;B GET SECOND COIN
	LDA PLAYER
	BEGIN
	LSR
	CSEND
	IFNE			;?2 OR MORE PLAYERS?
20$:
	DEC $$CRDT		;DEDUCT TWO COINS
	IFMI			;?OPTION SW FLAKEY?
	INC $$CRDT
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	RTS
BGNACT:			;BEGIN NEXT ACT
	JSR RSF			;CLEAR SCREEN
	JSR BSINIT		;BASIC INIT
	JSR CSINIT		;REDRAW CASTLES
	JSR LVDRW		;OVERLAY LIVES
	JSR PDINIT		;INIT PADDLE
	JSR LEDRON
	LDA I,0FF
	STA ATRACT		;WE ARE PLAYING A GAME
	LDA I,10.
	STA LA.CNT
	INC LV.CUR
	LDA LV.CUR
	CMP I,10.
	IFCS
	LDA I,9
	ENDIF
	STA LV.CNT
	LDA I,0
	STA LF.DRA
	STA LF.PLA
	STA LF.DRN
	LDX I,3
	BEGIN
	LDA X,TPADSW
	BIT PLAYER
	IFNE			;?PLAYER?
	INC LF.PLA		;COUNT ALIVE PLAYERS
	ELSE			;ELSE DRONE
	INC LF.DRA		;COUNT DRONES
	INC LF.DRN
	ENDIF
	DEX
	MIEND
				;CALCULATE DRONES ATTENTION SPAN
	LDA I,7
	CLC
	ADC CP.PHN
	CMP I,0F0		;?WITHIN RANGE?
	IFCS
	LDA I,0F0
	ENDIF
	STA CP.PHN
	STA CP.PHC
	LDA I,80		;DO GAME
	STA PHASE
	RTS
QEXPSC:			;?EXPLOSION OR SCORE IN PROGRESS?
	LDX I,3
	LDA I,0
	BEGIN
	ORA X,XP.FLG		;WAIT FOR EXPLOSION
	ORA X,SBUK12		;WAIT FOR SCORE
	ORA X,SBUK34
	DEX
	MIEND
	TAX
	RTS			;(ZFLAG)==>FINISHED
EXTACT:
	JSR MVPAD
	JSR POSDIS
	JSR BLINK
	JSR EXPLODE
	JSR LVDRW
	JSR VALROL
	JSR SHOWVL
	LDA LV.CNT
	IFNE
	LDX LV.PNM
	JSR VALLVL
	DEC LV.CNT
	ELSE
	LDA I,1
	STA DG.COM
	JSR QEXPSC
	IFEQ			;?EXPLOSION AND SCORE FINISHED?
				;?ALL EXPLOSIONS DONE?
	LDA I,0E
	STA PHASE
	ENDIF
	ENDIF
	RTS
EGAME:
	JSR MVPAD
	JSR POSDIS
	JSR BLINK
	LDY I,MS.GO
	LDA FRAME
	AND I,3F
	IFEQ
	JSR CLRMES
	ELSE
	JSR TYPMES
	ENDIF
	JSR LVDRW
	JSR VALROL
	JSR SHOWVL
	JSR EXPLODE
	JSR QEXPSC
	IFEQ			;?EXPLOSION, SCORE DONE?
				;?ALL EXPLOSION DONE?
	LDA PAUSTM
	IFMI
	JSR TSTHI
	JSR DRWHI
	LDA SWSTAT
	AND I,4
	IFEQ			;?ANNOUNCE END OF GAME?
	JSR SNDFAN
	ENDIF
	LDA I,4
	STA PAUSTM
	ENDIF
	LDA FRAME
	AND I,3F
	IFEQ
	DEC PAUSTM
	IFEQ
	JSR BSINIT
	LDA I,0
	STA ATRACT
	LDA I,2			;C  GOTO INPUT COINS
	STA PHASE
	ENDIF
	ENDIF
	ENDIF
	RTS

HISCORE:
	JSR SHOWVL
	JSR LVDRW
	LDY I,MS.GO
	JSR CLRMES
	LDA I,0			;ERASE ALL PADDLES
	LDX I,3
	BEGIN
	STA X,PD.FLG
	DEX
	MIEND
	LDA I,4			;START SEARCH ALL PLAYERS
	STA HS.PLN
	LDA I,12		;START NEXT NAME
	STA PHASE
	LDA LF.DRN
	CMP I,2
	IFEQ			;?TWO PLAYER?
	JSR DRWHI2
	LDA I,0
	LDX I,5
	BEGIN
	STA X,HS.CHR+4
	DEX
	MIEND
	LDA I,4
	ELSE			;ELSE ONE PLAYER
	JSR DRWHI1
	LDA I,0
	STA HS.CHR+1
	STA HS.CHR+2
	STA HS.CHR+3
	LDA I,1
	ENDIF
	STA HS.CPS		;CHARACTER POSITION IN TABEL
	RTS
NXTNAM:
	JSR LEDOFF
	JSR MVPAD
	JSR POSDIS
	DEC HS.PLN
	IFMI			;?OUT OF PLAYRS?
	JSR DRWHI
	LDA I,0A		;BACK TO ENDGMAE
	STA PHASE
	LDY I,MS.NAM
	JSR CLRMES
	RTS			;EXIT
	ENDIF
	LDX HS.PLN
	LDA PLAYER
	AND X,TPADSW
	IFNE			;?ONE OF THE PLAYERS?
	LDA X,TNMADL
	BIT SWSTAT
	IFMI			;?REFLECTED?
	CLC
	ADC I,2
	ENDIF
	STA HS.ADL
	LDA X,TNMADH
	STA HS.ADH
	LDA I,2			;ALLOW 3 INITIALS?
	STA HS.CNT
	LDA I,0
	STA HS.SWO		;ASSUME SWITCH PRESSED
	LDA I,60.
	STA HS.TIM
	LDA I,14		;GET NAME
	STA PHASE
	ENDIF
	RTS
	.SWORD
	.SPLIT 26.*32.+2+SCRFLD
	.SPLIT 26.*32.+27.+SCRFLD
	.SPLIT 3.*32.+4.+SCRFLD
	.SPLIT 3.*32.+29.+SCRFLD
TNMADL:	.DMPL
TNMADH:	.DMPH
GETNAM:	JSR HISCMS
	JSR DRWHNM		;OUTPUT THE NAMES
	LDX HS.PLN
	LDA FRAME
	AND I,0C
	IFNE			;?TURN ON?
	LDA X,TPADSW
	JSR LEDGLO
	LDA I,40
	ELSE
	JSR LEDOFF
	LDA I,0
	ENDIF
	STA X,PD.FLG
	JSR MVPAD
	JSR POSDIS
	LDX HS.PLN
	LDA X,PD.IN1		;TEST NEW VS OLD
	SEC			;INCLUDE HYSTERISIS
	SBC HS.HYS
	BVS 23$			;B ?WAY TOO FAR?
	CMP I,3
	IFCS			;?GE 3 DIFFERENCE?
	CMP I,0FE
	IFCC			;LT (-2) DIFF?
23$:	LDA X,PD.IN1		;USE NEW VALUE
	STA HS.HYS
	ENDIF
	ENDIF
	LDA HS.HYS
	CLC
	ADC I,80.
	STA J
	LSR			;1/2
	CLC
	ADC J			;1+1/2
	ROR			;3/4
	LSR			;3/8
	LSR			;3/16
	CLC
	ADC I,9.+40		;BASE
	CMP I,11.+40
	IFCC			;?LESS THAN 'A'
	LDA I,0		;FORCE A BLANK
	ENDIF
	CMP I,37.+40
	IFCS			;?GREATER THAN 'Z'?
	LDA I,36.+40		;FORCE A Z
	ENDIF
				;?DIRECT VIEW?
				;SAVE THE CHAR
	LDX HS.CPS
	STA X,HS.CHR
	LDX HS.PLN
	LDY X,TVLDIR		;FLIP CHARS IF NEEDED
	IFMI
	EOR I,0C0
	ENDIF
	BIT SWSTAT
	IFMI			;?REFLECTED?
	EOR I,40
	ENDIF
	STA HS.CHR		;PLAYER SPECIFIC INITIAL
	LDY X,PD.FLG
	IFEQ			;?PADDLE NOT VISIBLE?
	LDA I,2D		;THEN BLINK THE LETTER
	ENDIF
	LDY I,0
	STA NY,HS.ADL		;OUTPUT THE SELECTED CHAR
	LDX HS.PLN
	LDA X,TPADSW
	AND SWSTAT+3
	TAY
	EOR HS.SWO		;EDGE SENSITIVE PRESSED
	AND HS.SWO
	STY HS.SWO		;SAVE OLD STATE
	IFNE			;?FINALLY SELECTED A LETTER?
	LDA HS.CHR
	LDY I,0
	STA NY,HS.ADL		;SAVE ON SCREEN
	BIT SWSTAT
	BMI 43$			;B REFLECTED VIEW - UPRIGHT ONLY
	LDA X,TVLDIR
	IFMI
43$:
	DEC HS.ADL
	ELSE
	INC HS.ADL
	ENDIF
	LDA I,60.
	STA HS.TIM		;RESET TIME OUT
	INC HS.CPS		;POINT TO NEXT CHAR
	DEC HS.CNT
	IFMI
	JMP ENDNAM
	ENDIF
	ENDIF
	LDA FRAME
	AND I,3F
	IFEQ			;?A SECOND PASSED?
	DEC HS.TIM
	IFMI
	JSR ENDNAM
	ENDIF
	ENDIF
	RTS
ENDNAM:	LDA I,12		;NXTNAME
	STA PHASE
	LDA I,7
	STA HS.CPS  ;PREPARE FOR SECOND NAME
	LDX HS.PLN
	STX CL.PNM
	LDA I,0
	STA X,PD.FLG
	LDY I,DR.MTY		;BLANK CASTLE BACK OUT
	JSR DRPIC
	JSR DRWHI
	RTS
HISCMS:	LDY I,MS.NAM
	LDA FRAME
	AND I,7F
	IFEQ
	JSR CLRMES
	ELSE
	LDX HS.PLN
	LDA X,TVLDIR
	IFMI			;TOP OF SCREEN PLAYER
	JSR TYPMST
	ELSE			;ELSE PLAYER ON BOTTOM OF SCREEN
	JSR TYPMSB
	ENDIF
	ENDIF
	RTS
INIT:
	LDA I,0FF		;ALL SWITCHES OFF
	STA SWSTAT
	STA SWSTAT+1
	STA SWSTAT+2
	STA SWSTAT+3
	CLI			;START INTERRUPTS
	JSR RSF
	JSR BSINIT
	JSR CSINIT
	JSR PDINIT
	LDA I,0
	STA ATRACT
	LDA I,15.		;RESET ATTRACT MODE
	STA FRAME+1
	LDA I,2
	STA PHASE
	LDX I,8
	BEGIN
	LDA X,TNAME
	STA X,HS.CHR+1
	DEX
	MIEND
	LDA I,13
	STA SCOR34+5
	ASL
	STA SCOR34+6
	LDA I,75
	STA SCOR12+5
	STA SCOR12+6
	RTS
TNAME:
	.BYTE 4D,51,5C
	.BYTE 51,5D,4E
	.BYTE 5C,50,61
BSINIT:			;BASIC INIT
	LDA I,7F		;DO NOT TOUCH POTS FOR A WHILE
	STA PT.INT
	LDA I,0
	STA P.INIT		;START POKY INIT

			;***
			;POKEY PROTECT
	LDY P.RNDM
	.GLOBL RIP.1
RIP.1=.
			;***

	LDX I,MOTNUM-1
	BEGIN			;LOOP THRU ALL MOTION PICS
	STA X,SPIC
	DEX
	MIEND
	STA FRAME		;START FRAME COUNT
	STA FRAME+1
	LDX I,3
	BEGIN			;LOOP SET OF 4
	LDA I,0
	STA X,XP.FLG		;CLEAR OUT EXPLOSIONS
	DEX
	MIEND
	JSR KILBAL
	LDX I,3			;SET UP BIT TEST CONSTANTS

			;***
			;POKEY PROTECT
	TYA
	EOR P.RNDM
	EOR I,8		;A:=8 IF POKEY
	.GLOBL RIP.2
RIP.2=.
			;***

	BEGIN
	STA X,BITTST
	DEX
	LSR
	EQEND
	LDA I,3
	STA P.INIT		;POKEY UP AND RUNNING
	LDA I,0
	LDX I,7
	BEGIN			;CLEAR OUT POKEY
	STA X,PK.PNT
	STA X,P.AFRQ1
	DEX
	MIEND
	LDA I,20
	STA P.ACTL
	RTS
CSWALL:
	LDX I,3
	STX CL.PNM
	BEGIN
	LDY I,DR.WLL
	JSR DRPIC
	LDY I,DR.MTY
	JSR DRPIC
	DEC CL.PNM
	MIEND
	RTS
CSINIT:			;DRAW CASTLES PER PLAYER
	JSR WAITFRAME
	LDX I,3
	STX CL.PNM
	BEGIN			;LOOP THRU EACH CASTLE
	LDX CL.PNM
	LDA X,TPADSW
	BIT PLAYER
	IFNE			;?DRAW A PLAYER?
	LDY I,DR.WLL		;OUTPUT THE CASTLE WALLS
	JSR DRPIC
	LDY I,DR.KNG		;OVERLAY A PLAYER
	JSR DRPIC
	ELSE			;ELSE A DRONE
	LDY I,DR.WLL		;OUTPUT WALLS AND DRONE
	JSR DRPIC
	BIT SWSTAT
	IFVS			;?UPRIGHT?
	LDX CL.PNM
	LDA X,TPADSW
	AND I,0C
	IFNE			;?TOP TWO POSITIONS?
	LDY I,DR.BDU
	JSR DRPIC
	ENDIF
	ENDIF
	ENDIF
	DEC CL.PNM
	MIEND
	JSR WAITFRAME
	RTS
PDINIT:			;INIT ALL PADDLE PER PLAYER FLAGS
	LDX I,3
	BEGIN			;LOOP THRU EACH CASTLE
	LDA I,0D0		;ALIVE, READY TO DIE
	STA X,PD.FLG
	DEX
	MIEND
	RTS
KILBAL:			;KILL ALL BALLS
	LDX I,3
	BEGIN
	LDA I,0
	STA X,BL.FLG
	STA X,BL.FL2
	STA X,BL.PIC
	STA X,FL.PIC
	LDA X,PD.FLG
	AND I,0F7		;NO HELD BALL
	STA X,PD.FLG
	DEX
	MIEND
	RTS
LEDFAL:			;FLASH ALL
	LDA FRAME
	AND I,0C
	IFNE
	LDA I,0F		;LIGHTS ON
	BNE LEDGLO
	ENDIF
LEDOFF:	LDA I,0
	BPL LEDGLO
LEDFLD:				;FLASH DRONES
	LDA FRAME
	AND I,0C
	IFNE
	LDA I,0F
	BNE LEDGLO
	ENDIF
LEDRON:	LDA PLAYER
LEDGLO:	EOR I,0F		;FLIP LED SENSE
	ROR			;INTO CARRY
	ROR			;INTO HI BIT
	STA W.LED1
	ROR
	STA W.LED2
	ROR
	STA W.LED3
	ROR
	STA W.LED4
	RTS
REGDRW:
	LDY I,MS.REG		;DRAW 'ATARI INC'
	JSR WHLMSB
	LDX I,4
	BEGIN
	LDA X,TREGV		;VERTICAL Y POSIT
	STA X,BL.PYH+1
	LDA X,TREGP
	BIT SWSTAT
	IFMI			;?MIRRORED FLIP?
	EOR I,40
	ENDIF
	STA X,BL.PIC+1
	LDA X,TREGH
	BIT SWSTAT
	IFMI			;?MIRRORED FLIP?
	EOR I,0FF
;80-LOC+80-8=0-LOC-8
	SEC			;MOVE ONE CLOSER TO CENTER
	SBC I,8
	ENDIF
	STA X,BL.PXH+1
	DEX
	MIEND
	RTS
TREGP:	.BYTE 1E,1F,11,0,12
TREGH:	.BYTE 12.*8-1,13.*8+1,12.*8,13.*8,13.*8
TREGV:	.BYTE 256.-8,256.-8,256.-16.,256.-16.,256.-16.
LAUNCH:  ; LAUNCH A NEW BALL
	BEGIN
	LDA X,BL.FLG
	IFEQ			 ;?BALL AVAILABLE (DEAD)?
	LDA I,124.
	STA X,BL.PXH
	LDA I,124.+8
	STA X,BL.PYH
	LDA I,20
	BIT P.RNDM
	IFMI			;RANDOM D7?
	EOR I,0FF		;FLIP LEFT/RIGHT TARGET
	ENDIF
	STA X,BL.VXB
	IFVS			;?RANDOM D6?
	EOR I,0FF		;FLIP TOP/BOTTOM
	ENDIF
	STA X,BL.VYB
	LDA I,0D0		 ;C ALIVE WITH COLLISIONS ENABLED
	STA X,BL.FLG
	LDA I,10		;BALL ALIVE, SLOW SPEED
	STA X,BL.FL2
	JSR SPDBAS
	TXA
	PHA
	JSR SNDLBL
	PLA
	TAX
	RTS			; EXIT
	ENDIF
	DEX
	MIEND
	RTS
DGLAUNCH:			;LAUNCHED FROM DRAGON
	LDA DGXDIS+7
	STA BL.PXH
	LDA DGYDIS+7
	STA BL.PYH
	LDA I,-113.
	EOR DG.DRX		;SET X IN PROPER DIRECTION
	STA BL.VXB
	LDA I,-113.		;SETUP Y DIRECTION
	EOR DG.DRY
	STA BL.VYB
	LDA I,0D0
	STA BL.FLG
	LDA I,15
	STA BL.FL2
	JSR SPDBAS
	JSR SNDLBL
	RTS
CASTRT:			;CASTLE START
	LDX I,3
	STX CL.PNM
	BEGIN			;TEST EACH CASTLE
	LDX CL.PNM
	LDA PLAYER		;START ONLY NON-PLAYERS
	EOR I,0F
	AND X,TPADSW
	BIT PH1EDG
	IFNE			;?DO WE HAVE AN EDGE?
	ORA PLAYER
	STA PLAYER		;TURN ON PLAYER
	INC LF.PLA
	LDA I,0D0
	STA X,PD.FLG
	LDY I,DR.KNG			;OUTPUT PLAYER OR KING
	JSR DRPIC
	JMP SNDCSN		;ONLY PROCESS ONE PAID PLAYER AT A TIME
	ENDIF
	DEC CL.PNM
	MIEND
	RTS
BLINK:
	LDX I,3
	STX CL.PNM
	BEGIN			;LOOP THRU CASTLES
	LDX CL.PNM
	LDA X,TPADSW
	AND PLAYER
	IFNE			;?BLINK PLAYERS ONLY?
	LDA X,PD.FLG
	IFMI
	LDA FRAME
	AND I,01F
	IFEQ			;?RESTORE CASTLES?
	LDY I,DR.KNG
	JSR DRPIC
	ELSE
	CMP I,18
	IFCS			;?BLINK IT OFF?
	LDY I,DR.BLN
	JSR DRPIC
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	DEC CL.PNM
	MIEND
	RTS
EXPBGN:
	LDX CL.PNM
	LDA I,0E7
	STA X,XP.FLG
	LDA I,0
	STA X,XP.TIM
	RTS
EXPLODE:
	LDX I,3
	STX CL.PNM
	BEGIN			;LOOP THRU CASTLES
	LDX CL.PNM
	LDA X,XP.FLG
	IFMI			;?EXPLOSION IN PROGRESS?
	DEC X,XP.TIM
	IFMI			;?TIME FOR NEXT PICTURE?
	LDA I,3
	STA X,XP.TIM
				;C  SET NEXT PICTURE
	INC X,XP.FLG
	IFEQ			;?DONE WITH EXPLOSION?
	LDA I,0
	STA X,XP.FLG
	ELSE
	LDA X,XP.FLG
	AND I,7
	TAX
	LDA X,TEXPIC
	IFMI			;?BLANK AREA FIRST
	LDX CL.PNM
	LDA X,PD.FLG
	IFMI			;?PLAYER ALIVE?
	LDY I,DR.KNG		;OUTPUT PLAYER
	ELSE
	LDY I,DR.MTY		;ELSE BLANK OUT
	ENDIF
	JSR DRPIC
	ENDIF
	LDX CL.PNM
	LDA X,XP.FLG
	AND I,7
	TAX
	LDA X,TEXPIC
	AND I,1F
	TAY			;C  OVERLAY WITH DESIRED PIC
	JSR DRPIC
	ENDIF
	ENDIF
	ENDIF
	DEC CL.PNM
	MIEND
	RTS
TEXPIC:	.BYTE DR.CL1,DR.CL2,DR.CL3,DR.CL4
	.BYTE DR.CL3!80,DR.CL2!80,DR.CL1!80,DR.MTY
TRAVEL:
	LDX I,BL.NUM-1
	STX CL.BNM
	BEGIN			;LOOP THRU EACH BALL
	LDX CL.BNM
	LDA X,BL.FL2
	IFNE			;?BALL ALIVE?
	JSR MVBALL
	ENDIF
	DEC CL.BNM
	MIEND
	JSR FLAMEIT
	JSR DRIZLE
	JSR POSDIS
	LDX I,BL.NUM-1
	STX CL.BNM
	BEGIN
	JSR DOCOLL
	DEC CL.BNM
	MIEND
	RTS
MVBALL:
	LDX CL.BNM
	LDA X,BL.FLG
	BIT BIT08
	IFNE			;?BALL HELD?
	AND I,3
	TAY			;OBTAIN PADDLE INFO
	STY CL.PNM
	LDA Y,PD.PX1		;OVERLY PADDLE WITH BALL
	STA X,BL.PXH
	LDA Y,PD.PY1
	STA X,BL.PYH
	EOR X,BL.PXH
	ASL			;UP LEFT,LOW RIGHT NEED PADDLE INVERTED
	LDA Y,PD.IN1
	IFCS			;?QUADE A OR D?
	EOR I,0FF		;THEN CONVERT PADDLE LOC
	CLC
	ADC I,1
	ENDIF
	STA J
	IFPL			;?AIM TO RIGHT?(BASE QUAD)
	LDA I,80.
	SEC
	SBC J			;CALC ANGULAR DISP
	STA K
	LSR			;TIMES 1,5 (EXPAND 0-80 TO 0-120.)
	CLC
	ADC K
	STA X,BL.VYB		;PARTIALY UPWARD
	LDA I,120.
	STA X,BL.VXB		;FULL SPEED RIGHT
	ELSE			;ELSE AIM UP
	LDA I,+80.
	CLC
	ADC J
	STA K			;CALC ANGULAR VELOCITY
	LSR			;TIMES 1.5 (EXPAND 0-80 TO 0-120.)
	CLC
	ADC K
	STA X,BL.VXB		;PARTIAL X RIGHTWARD
	LDA I,120.
	STA X,BL.VYB		;FULL SPEED UPWARD
	ENDIF
	LDA X,BL.PXH
	IFMI			;?RIGHT HALF?
	LDA X,BL.VXB		;THEN REVERSE X VELOCITY
	EOR I,0FF
	CLC
	ADC I,1
	STA X,BL.VXB
	ENDIF
	LDA X,BL.PYH
	IFMI			;?TOP HALF?
	LDA X,BL.VYB
	EOR I,0FF
	CLC
	ADC I,1
	STA X,BL.VYB
	ENDIF
	ELSE			;ELSE NOT HELD
	LDA X,BL.VXL		;C  X HORIZ
	CLC
	ADC X,BL.PXL
	STA X,BL.PXL
	LDA X,BL.VXH
	ADC X,BL.PXH
	STA X,BL.PXH
	IFVS			;?PASSED MIDPOINT?
	JSR HALFWY
	ENDIF
	ROR
	EOR X,BL.VXH		;C  INCLUDE DIRECTION IN OVERFLOW/UNDERFLOW
	IFMI			;?WRAPPED OVER ZERO?
	JSR XWRAP
	ELSE			;ELSE TEST RIGHT EDGE
	LDA X,BL.PXH
	CMP I,249.
	IFCS			;?WENT PAST RIGHT EDGE?
	JSR XWRAP
	ENDIF
	ENDIF
	LDA X,BL.VYL		;C  Y VERT
	CLC
	ADC X,BL.PYL
	STA X,BL.PYL
	LDA X,BL.VYH
	ADC X,BL.PYH
	STA X,BL.PYH
	IFVS			;?PASSED MIDPOINT?
	JSR HALFWY
	ENDIF
	LDA X,BL.PYH
	CMP I,249.
	IFCS			;?WENT OVER TOP?
	JSR YWRAP
	ELSE
	LDA X,BL.PYH
	CMP I,16.
	IFCC
	JSR YWRAP
	ENDIF
	ENDIF
	ENDIF
	RTS
XWRAP:				;X COORD HAS WRAPPED AROUND
	LDA I,0			;C  REVERSE LO BYTE
	SBC X,BL.PXL
	STA X,BL.PXL
	LDA X,BL.VXH		;C  GET CURRENT DIRECTION
	IFMI			;?GOING LEFT?
	LDA I,0
	ELSE			;ELSE WRAPPED RIGHT EDGE
	LDA I,256.-8-8
	ENDIF
	SBC X,BL.PXH
	STA X,BL.PXH
	JSR BFLPVX
	LDA X,BL.FL2
	IFMI			;?BREAKOUT MODE?
	LDA X,BL.FLG		;C RE-ENABLE SCREEN COLLISIONS
	ORA I,80
	STA X,BL.FLG
	LDA P.RNDM
	EOR X,BL.VYB
	AND I,0F
	EOR X,BL.VYB
	STA X,BL.VYB
	JSR SPDBAS
	ENDIF
BIT20:	JSR SNDWBX
	RTS
YWRAP:			;Y COORD HAS WRAPPED AROUND
	LDA I,0			;C  REVERSE LOW BYTE
	SEC
	SBC X,BL.PYL
	STA X,BL.PYL
	LDA X,BL.VYH		;C GET CURRENT DIRECTION
	IFMI			;?GOING DOWN
	LDA I,32.		;C  (16.-Y+16.)==>(32.-Y)
	ELSE			;ELSE WRAPPED OVER TOP
	LDA I,256.-8-8
	ENDIF
	SBC X,BL.PYH
	STA X,BL.PYH
	JSR BFLPVY
	LDA X,BL.FL2
	IFMI			;?BREAKOUT MODE?
	LDA X,BL.FLG		;C RE-ENABLE SCREEN COLLISIONS
	ORA I,80
	STA X,BL.FLG
	LDA P.RNDM
	EOR X,BL.VXB
	AND I,0F
	EOR X,BL.VXB
	STA X,BL.VXB
	JSR SPDBAS
	ENDIF
	JSR SNDWBY
	RTS
HALFWY:
	LDA X,BL.FLG
	ORA I,0C0
	STA X,BL.FLG
	LDA X,BL.FL2		;C END OF BREAKOUT
	AND I,7F
	STA X,BL.FL2
	RTS
FLAMEIT:			;FLAME THE FIREBALLS
	LDX I,BL.NUM-1
	BEGIN			;LOOP THRU ALL FIREBALLS
	LDA X,BL.FLG
	IFNE			;?BALL ALIVE?
	JSR FLAMGN
	ENDIF
	DEX
	MIEND
	RTS
FLAMGN:
	LDA X,BL.FL2
	AND I,8
	IFNE			;?BALL WHIZZING AWAY?
	LDA FRAME
	AND I,0F
	TAY
	LDA Y,TFLWIZ		;WHIZZING BALL SPINS AROUND
	ELSE			;ELSE NOT WHIZZING
	LDA X,BL.FLG
	AND I,8
	IFNE			;?BALL HELD?
	LDA I,3			;THEN PREPARE FOR FANCY PICTURE
	ENDIF
	AND FRAME
	STA K
	LDA X,BL.VXB
	ASL
	LDA X,BL.VYB
	ROL
	ROL
	AND I,3
	LDY K			;CHANGE QUADS
	EOR Y,TFLHLD		;PREPARE FOR FANCY HELD BALL
	STA L			;C  QUAD OF INTERSET
	LDA X,BL.VXB
	IFMI			;?ABSOULTE VALUE-APPROX?
	EOR I,0FF
	ENDIF
	TAY			;C  ALS(X)
	LDA X,BL.VYB
	IFMI			;?ABSOLUTE(Y)-APPROX?
	EOR I,0FF
	ENDIF
				;C ABS(Y)
	LSR K			;HELD BALL FLAG
	STY J			;J:=ABS(X)
	STA K			;K:=ABS(Y)
	IFCS			;?HELD BALL?
	STA J			;EXCHANGE X,Y
	STY K			;ROTATES BALL 90 DEGREES
	ENDIF
	LDA K
	CMP I,80.
	IFCS			;?Y AT MAX?
	LDA J			;THEN CHECK X FOR ANGLE
	CMP I,80.
	IFCS			;?45 DEGREES?
	LDA I,8			;C  YG MAJOR DISP
	ELSE			;ELSE 0 DEGREES OR 22 DEGREES
	CMP I,24.
	IFCS			;?22 DEGREES?
	LDA I,4			;C  YE MAJOR DISP
	ELSE			;ELSE 0 DEGREES?
	LDA I,0
	ENDIF
	ENDIF
	ELSE			;ELSE X AT MAX
	LDA K			;THEN CHECK Y FOR ANGLE
	CMP I,80.
	IFCS			;?45 DEGREES?
	LDA I,8			;THEN XG MAJOR DISP
	ELSE			;ELSE 0 OR 22 DEGREES
	CMP I,24.
	IFCS			;?22 DEGREES?
	LDA I,0C		;THEN XE MAJOR DISP
	ELSE			;ELSE 0 DEGREES
	LDA I,10		;THEN XL MAJOR DISP
	ENDIF
	ENDIF
	ENDIF
	ORA L			;C  COMBINE QUAD AND MAJOR DISP PER ANGLE
	ENDIF			;A:=SPECIAL ANGLE BALL IS POINTING AT
	TAY
	LDA Y,TFLPIC
	STA X,FL.PIC
	LDA I,5
	STA X,BL.PIC
	LDA FRAME
	BIT BIT04
	IFNE			;?ROTATE FIREBALL?
	INC X,BL.PIC
	ENDIF
	AND I,8
	IFNE			;?TIME TO OSCILLATE FLAMES?
	LDA X,FL.PIC
	IFNE			;?FLAME VISIBLE?
	INC X,FL.PIC
	ENDIF
	INC X,BL.PIC
	INC X,BL.PIC		;ADD 2
	ENDIF
	LDA Y,TFLX
	CLC
	ADC X,BL.PXH
	STA X,FL.PXH
	CMP I,256.-3-4		;EDGE-OFFSET-MIDPIC
	IFCS
	LDA I,0
	STA X,FL.PIC
	ENDIF
	LDA Y,TFLY
	CLC
	ADC X,BL.PYH
	STA X,FL.PYH
	RTS
				;SEQUENCE-UPPER RIGHT,LOWER RIGHT,UPPER LEFT,LOWER LEFT
TFLX:				;X DISP TO FLAME
	.BYTE 0,0,0,0		;0-Y UP
	.BYTE -2,-2,+2,+2	;22-Y
	.BYTE -5,-5,5,5		;45-X,Y DIAG
	.BYTE -6,-6,+6,+6	;22 -X
	.BYTE -7,-7,+7,+7	;0-X RIGHT
TFLY:				;Y DISP TO FLAME
	.BYTE -7,+7,-7,+7	;0-Y UP
	.BYTE -6,6,-6,6		;22 -Y
	.BYTE -5,5,-5,5		;45 -Y,X DIAG
	.BYTE -2,2,-2,2	;22 -X
	.BYTE 0,0,0,0		;0-X RIGHT
TFLPIC:				;FLAME PICTURE
	.BYTE 0B,8B,4B,0CB	;0-Y UP
	.BYTE 0F,8F,4F,0CF	;22-Y
	.BYTE 13,93,53,0D3	;45-Y,X DIAG
	.BYTE 8D,0D,0CD,4D	;22-X
	.BYTE 89,9,0C9,49	;0-X RIGHT
TFLWIZ:			;PICS FOR WHIZZING FLAME
	.BYTE 0,4,8,12.
	.BYTE 17.,13.,9,5
	.BYTE 3,7,11.,15.
	.BYTE 18.,14.,10.,6
TFLHLD:			;HOLD BALL
	.BYTE 0,1,3,2
DRIZLE:
	LDX I,3
	STX CL.BNM
	BEGIN			;LOOP THRU BALLS
	LDX CL.BNM
	LDA X,BL.FLG
	BIT BIT08
	IFNE			;?BALL BEING HELD?
	AND I,3			;ISOLATE PADDLE #
	TAY
	STY CL.PNM
	LDA X,DZ.CNT
	IFMI ;?START NEW DRIZZLE?
	JSR DZSTRT
	ENDIF
	LDA X,DZ.PX		;MOVE DRIZLE
	CLC
	ADC X,DZ.VX
	STA X,DZ.PX
	STA Y,PD.PX1
	LDA X,DZ.PY
	CLC
	ADC X,DZ.VY
	STA X,DZ.PY
	STA Y,PD.PY1		;OSCILLATE PICTURE
	LDA FRAME
	AND I,3
	IFEQ			;?TIME TO SHIMMER?
	LDA X,DZ.PIC
	EOR I,0C0
	STA X,DZ.PIC
	ENDIF
	LDA X,DZ.PIC
	STA Y,PD.PIC
	LDA I,<SCRFLD/400>&3F	;TEST COLLISION
	STA ADH
	LDA I,251.		;CONVERT Y
	SEC
	SBC X,DZ.PY
	AND I,0F8		;Y*32/8=>Y*4
	ASL
	ROL ADH
	ASL
	ROL ADH
	STA ADL
	LDA I,4
	CLC
	ADC X,DZ.PX
	LSR			;X/8
	LSR
	LSR
	ORA ADL
	STA ADL
	LDY I,0
	LDA NY,ADL		;GET PLAYFIELD
	AND I,3F
	IFNE			;?CONTACT SOMETHING?
	JSR DZHIT
	ENDIF
	ENDIF
	DEC CL.BNM
	MIEND
	RTS

DZHIT:
	DEC X,DZ.CNT
	IFPL ;?WHACK AT CASTLE SOME MORE?
	JSR DZREST ;THEN RESTORE DRIZZLE, TRY AGAIN
	ELSE ;ELSE TIME IS UP- EVALUATE HIT
	CMP I,59.
	IFCS ;?HIT BRICKS?
	LDA I,0 ;THEN DESTROY THE RICK
	STA NY,ADL
	LDA I,-4 ;AND START DRIZZLE
	JSR DZSTRT
	ELSE ;ELSE HIT COURTYARD
	LDA X,BL.FLG
	AND I,37 ;NO PADDLE, NO SCREEN, NOT HELD
	ORA I,4 ;BALL OWNED
	STA X,BL.FLG
	JSR SPDWHZ ; WHIZ AWAY
	JSR SNDLBL ;APPROPRIATE SOUND
	LDX CL.PNM
	LDA X,PD.FLG
	AND I,0F7 ;NOT HOLDING BALL
	STA X,PD.FLG
	ENDIF
	ENDIF
	RTS

DZSTRT:				;START THE DRIZZLE
	EOR I,0FF
	STA X,DZ.CNT
DZREST:  ;RESTORE DRIZZLE
	LDA X,BL.PXH		;STARTING POSITION
	STA X,DZ.PX
	LDA X,BL.PYH
	STA X,DZ.PY
	LDA X,BL.VXB		;SETUP X VELOCITY
	IFPL			;?GOING TO RIGHT?
	CMP I,60.
	IFCS			;?AT DECENT SPEED?
	LDA I,-1		;THEN DRIZZLE LEFT
	ELSE			;ELSE DRIZZLE UP/DOWN ONLY
	LDA I,0
	ENDIF
	ELSE			;ELSE GOING TO LEFT
	CMP I,-60.
	IFCS			;?AT SMALL SPEED?
	LDA I,0			;THEN DRIZZLE UP/DOWN ONLY
	ELSE			;ELSE GOING FAST LEFT
	LDA I,+1		;SO DRIZZLE TO RIGHT
	ENDIF
	ENDIF
	STA X,DZ.VX
	LDA X,BL.VYB		;SETUP Y VELOCITY
	IFPL			;?GOING UP
	CMP I,60.
	IFCS			;?AT REASONABLE RATE?
	LDA I,-1		;THEN DRIZZLE DOWN
	ELSE			;ELSE GOING LEFT/RIGHT ONLY
	LDA I,0			;SO NO UP/DOQN DRIZZLE
	ENDIF
	ELSE			;ELSE GOING DOWN
	CMP I,-60.
	IFCS			;?BUT NOT FAST?
	LDA I,0			;DO DRIZZLE LEFT/RIGHT ONLY
	ELSE			;ELSE MOVING FAST DOWN
	LDA I,+1		;SO DRIZZLE UPWARD
	ENDIF
	ENDIF
	STA X,DZ.VY
				;OBTAIN STAMP
	LDA X,DZ.VY
	IFNE			;?MOVEING IN Y DIRECTION?
	LDA X,DZ.VX
	IFNE			;?ALSO MOVING LEFT/RIGHT?
	EOR X,DZ.VY		;THEN TEST WHICH DIAGONAL
	IFMI			;?BACKSLASH DIRECTION?
	LDA I,44
	ELSE			;ELSE SLASH DIRECTION
	LDA I,4
	ENDIF
	ELSE			;ELSE NO X COMPONENT
	LDA I,3			;SO UP/DOWN ONLY
	ENDIF
	ELSE			;ELSE NO Y COMPONENT
	LDA I,15		;SO DRIZZLE LEFT/RIGHT ONLY
	ENDIF
	STA X,DZ.PIC
	RTS

CKS1:	.BYTE GCKS1
CPUDO:				;DO COMPUTER CONTROLLED PLAYERS
	LDA LF.DRA
	IFEQ			;?NO DRONES TO CONTROL?
	RTS
	ENDIF
	LDA CP.PLH
	IFNE			;?PLAYER GOT HIT?
	LDA CP.PHC
	IFNE			;?PLAYER NEEDED TO BE HIT?
	LDY P.RNDM
	CPY SCOR56+4
	IFCS ;HIGHER SCORE==>TOUGHER DRONES
;	;SEC
	SBC CP.PLH		;REDUCE COUNT OF HITS REMAINING
	IFCC ;?WRAPPED PAST ZERO?
	LDA I,0
	ENDIF
	STA CP.PHC
	ENDIF
	ENDIF
	ENDIF
	LDA CP.PHN
	LSR
	CMP CP.PHC
	IFCC			;?PLAYER NOT SUPPOSED TO HIT DRONE?
	LDA CP.DRH		;?BUT DRONE HIT ANYWAY?
	IFNE
	LDA LF.PLA
	LSR			;1 PLAYER=>1
	ASL			;2 PLAYER=>3
	SEC
	ADC CP.MXS
	CMP I,78
	IFCS
	LDA I,78
	ENDIF
	STA CP.MXS
	ENDIF
	ELSE			;ELSE PLAYER TO HIT DRONE
	LDA CP.PDP		;DRONE PADDLE HIT
	IFNE			;?DRONE PADDLE TOO PROTECTIVE?
	BIT SCOR56+4 ;BE TOUGH ON HI SCORES
	IFPL ;?LO SCORE? THEN SLOW DOWN
	DEC CP.MXS
	IFEQ
	INC CP.MXS
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	LDA CP.DRH
	IFNE			;?PLAYER HIT DRONE?
				;FRACTION OF 256. THAT IMPROVE DRONE
	LDA CP.PHN
	STA CP.PHC		;START COUNTING FRESH
	ENDIF
	LDA I,0
	STA CP.DRH
	STA CP.PDP
		;***
		; RIPOFF PROTECT
	LDY SCOR56+4
	IFNE ;?START CHECKING PAST WAVE 1?
	LDA RIP.A
	EOR I,13	;(RIP.A=13)==> OK
	ENDIF
		;A:=0 (GOOD) ELSE RIPOFF--MAKE DRONES TOO EASY
		; 		--RIPPED OFF GAME IS BORING AND TOO LONG
	.GLOBL RIP.3
RIP.3=.
		;***
	AND P.RNDM
	STA CP.PLH
	LDA CP.PHN		;PHC/PHN, DT SET IF EQUAL
	STA K
	LDX I,7			;LOOP FOR 8 TIMES
	LDA CP.PHC
	BEGIN
	CMP K
				;SAVE THE RESULT
	IFCS			;?THIS DIVISOR FITS?
;[SEC]
	SBC K
	ENDIF
	ROL L			;SAVE THE RESULT
	LSR K
	DEX
	MIEND
	LDA I,0
	LDX I,7
	ASL L
	BEGIN			;LOOP THRU MULTIPLY
	IFCS
	CLC			;AREA:=LOW BYTE PRODUCT
	ADC CP.MXS
	IFCS
	INC L
	ENDIF
	ENDIF
	ASL 
	ROL L			;SHIFT IN HI BYTE RESULT, SHIFT OUT MULT
	DEX
	MIEND
	LDA L			;OUT NEW DESIRED SPEED
	CMP CP.DSS
	IFCS			;?INCREASE ACTUAL SPEED?
	IFNE			;?AT LEAST A BIT?
	INC CP.DSS
	LDA I,70
	CMP CP.DSS
	IFCC			;?SPEED TOO HI?
	STA CP.DSS		;THEN KEEP SPEED IN BOUNDS
	ENDIF
	ENDIF
	ELSE			;ELSE SLOW DOWN OUR SPEED
	LDA I,1
	CMP CP.DSS
	IFCC			;?ROOM TO SLOW DOWN?
	DEC CP.DSS
	ENDIF
	ENDIF
	LDX I,3
	STX CL.PNM
	BEGIN			;LOOP THRU EACH PADDLE
	LDX CL.PNM
	LDA X,TPADSW
	AND ATRACT		;DURING ATTRACT,DRONE ALL PLAYERS
	AND PLAYER
	IFEQ			;?DRONE THIS PLAYER?
	LDA X,PD.FLG
	IFMI			;?DRONE ALIVE+
	LDA X,CP.PDC
	STA CP.DPD
	TXA			;IGNORE BALLS EVERY SO OFTEN
	EOR FRAME
	AND I,3
	IFNE			;?LIMIT CPU TIME?
	LDX I,3
	STX CL.BNM
	LDA I,0FF
	STA CP.DIS		;VERY FAR DISTANCE
	BEGIN
	LDX CL.BNM
	LDA X,BL.FLG
	IFNE			;?BALL ALIVE?
	JSR CPUDIR		;VERIFY BALLS DIRECTION
	IFNE			;?COMING TO US?
	JSR CPUINT
	ENDIF
	ENDIF
	DEC CL.BNM
	MIEND			;NEXT BALL
	ENDIF
	JSR CPUSLW		;SLEW PADDLE TO POSITION
	ENDIF
	ENDIF
	DEC CL.PNM
	MIEND			;NEXT PADDLE
	RTS
CPUDIR:			;CHECK IF BALL IS APPROACHING US-CHECK DIRECTION
	LDX CL.BNM
	LDY CL.PNM
	LDA Y,PD.PX1
	EOR X,BL.PXH
	STA J
	EOR X,BL.PYH
	EOR Y,PD.PY1
	STA K
	IFMI			;?BALL IN ADJACENT QUADRANT?
	LDA J
	BPL 20$			;B FOR MATCHING X QUAD, X DIR IS ALWAYS APPROACHING
	ENDIF
	LDA X,BL.VXB
	EOR Y,PD.PX1
	ASL
	LDA J
	IFPL			;?SAME QUAD?
	BCS 30$			;?GOOD IF JUST ONE DIR MATCHES
	ELSE			;ELSE NOT SAME QUAD
	BCC 90$			;ONE DIR BAD KILLS IT
	ENDIF
20$:
	LDA K
	IFMI			;?IN ADJACENT QUAD?
	EOR J			;TEST FOR MATCHING Y
	BPL 30$			;B Y MATCHES--ALWAYS APPROACHING
	ENDIF
	LDA X,BL.VYB
	EOR Y,PD.PY1
	BPL 90$			;B GOING AWAY-NO COLLISION
30$:				;Y OKAY, XOKAY
	LDA I,0FF		;L BALL IS ABLE TO COLLIDE
	RTS
90$:	LDA I,0			;L BALL IS GOING AWAY-IGNORE IT
	RTS
CP.XLO	=64.			;X ORIGIN
CP.YLO	=64.			;Y ORIGIN
CP.XLN	=80./2+CP.XLO		;X LINE
CP.YLN	=80./2+CP.YLO		;Y LINE
CP.XLB	=CP.XLO-40.		;X BASE BANK LINE
CP.YLB	=CP.YLO-40.		;Y BASE BANK LINE
CPUINT:
	LDX CL.BNM
	LDY CL.PNM
	LDA Y,PD.PX1		;CONVERT BALL COORDS
	IFMI			;?RIGHT SIDE?
	LDA I,256.-8
	SEC
	SBC X,BL.PXH
	ELSE
	LDA X,BL.PXH
	ENDIF
	LSR
	CLC
	ADC I,CP.XLO
	STA CP.PX1
	LDA Y,PD.PY1		;CONVERT Y COORD TO BASE
	IFMI
	LDA I,<256.-8+16.>&0FF
	SEC
	SBC X,BL.PYH
	ELSE
	LDA X,BL.PYH
	ENDIF
	LSR 
	CLC
	ADC I,CP.YLO-8		;CORRECT FOR BASE OFFSET/2
	STA CP.PY1
	LDA Y,PD.PX1		;CALC 2ND POINT
	ASL
	LDA X,BL.VXB
	IFCS			;FLIP QUADS
	EOR I,0FF
	ENDIF
	CMP I,80
	ROR
	CLC
	ADC CP.PX1
	STA CP.PX2
	LDA Y,PD.PY1		;CALC Y2
	ASL
	LDA X,BL.VYB
	IFCS
	EOR I,0FF
	ENDIF
	CMP I,80
	ROR
	CLC
	ADC CP.PY1
	STA CP.PY2
	LDA I,0
	STA CP.INY		;NO Y INTERCEPT GET
	STA CP.INX		;NO X INTERCEPT YET
	LDA I,CP.XLN		;SORT FOR Y INTERCEPT TEST
	CMP CP.PX1
	IFCC			;?POINT 1 TO THE RIGHT?
	CMP CP.PX2
	IFCC			;?POINT 2 ALSO THE THE RIGHT?
	JMP 20$			;THEN NO Y INTERCEPT POSSIBLE
	ENDIF			;ELSE EXCHANGE THE POINTS
	LDA CP.PX1
	LDY CP.PX2
	STA CP.IX2
	STY CP.IX1
	LDA CP.PY1
	LDY CP.PY2
	STA CP.IY2
	STY CP.IY1
	ELSE			;ELSE POINT 1 TO THE LEFT
	CMP CP.PX2
	IFCS			;?POINT 2 ALSO TO THE LEFT?
	JMP 20$			;THEN NO Y INTERCEPT POSSIBLE
	ENDIF			;ELSE POINT 2 TO THE RIGHT
	LDA CP.PX1		;KEEP SAME ORDER
	LDY CP.PX2
	STA CP.IX1
	STY CP.IX2
	LDA CP.PY1
	LDY CP.PY2
	STA CP.IY1
	STY CP.IY2
	ENDIF
				;POINTS SORTED LEFT/RIGHT FIND COLLISION
	LDY I,7			;#OF BINARY CYCLES
	BEGIN
	LDA CP.IX1
	CLC
	ADC CP.IX2
	ROR			;INCLUDE UNSIGNED OVERFOW
	CMP I,CP.XLN
	IFCS			;?MID POINT TO RIGHT OF INTERSECT?
	STA CP.IX2		;THEN SHOVE RIGHT POINT OVER
	LDA CP.IY1
	CLC
	ADC CP.IY2
	ROR
	STA CP.IY2
	ELSE			;ELSE MIDPOINT TO LEFT-MOVE POINT 1
	STA CP.IX1
	LDA CP.IY1		;NOTE:CARRY CLEAR
;	[CLC]
	ADC CP.IY2
	ROR
	STA CP.IY1
	ENDIF
	DEY
	MIEND
	LDA CP.IY2		;CHECK AND CORRECT THE RESULT
	CMP I,CP.YLN
	IFCS			;?OVER THE PADDLE RANGE
	JMP 20$			;INTERSECT IS TOO FARAWAY
	ENDIF
	CMP I,CP.YLB
	IFCC			;?UNDER THE PADDLE RANGE?
	JMP 20$			;INTERSECT NOT HI ENOUGH
	ENDIF
	CMP I,CP.YLO
	IFCC
	LDA I,CP.YLO+CP.YLO		;THEN CONVERT TO AFTER BANK VALUE
	SEC
	SBC CP.IY2
	STA CP.IY2		;
	ENDIF
	LDA CP.IY2
	STA CP.INY		;Y INTERCEPT, THIS VALUE
20$:				;CHECK FOR X INTERCEPT
	LDA I,CP.YLN		;SORT FOR X INTERCEPT TEST
	CMP CP.PY1
	IFCC			;?POINT 1 ON TOP?
	CMP CP.PY2
	IFCC			;?POINT 2 ALSO ON TOP?
	JMP 40$			;THEN NO X INTERECPT POSSIBLE
	ENDIF			;ELSE EXCHANGE POINTS
	LDA CP.PY1
	LDY CP.PY2
	STA CP.IY2
	STY CP.IY1
	LDA CP.PX1
	LDY CP.PX2
	STA CP.IX2
	STY CP.IX1
	ELSE			;ELSE POINT 1 UNDERNEATH
	CMP CP.PY2
	IFCS			;?POINT 2 ALSO UNDERNEATH?
	JMP 40$			;THEN NO X INTERCEPT POSSIBLE
	ENDIF			;ELSE POINT 2 ON TOP
	LDA CP.PX1		;SO KEEP SAME ORDER
	LDY CP.PX2
	STA CP.IX1
	STY CP.IX2
	LDA CP.PY1
	LDY CP.PY2
	STA CP.IY1
	STY CP.IY2
	ENDIF
				;POINTS SORTED BOTTOM/TOP
	LDY I,7			;# OF BINARY CYCLES
	BEGIN
	LDA CP.IY1
	CLC
	ADC CP.IY2
	ROR			;INCLUDE UNSIGNED OVERFOW
	CMP I,CP.YLN
	IFCS			;?MIDPOINT ABOVE INTERSECT?
	STA CP.IY2		;THEN BRING TOPPOINT DOWNWARD
	LDA CP.IX1
	CLC
	ADC CP.IX2
	ROR
	STA CP.IX2
	ELSE			;ELSE MIDPOINT UNDERNEATH
	STA CP.IY1		;NOTE:CARRY CLEAR
	LDA CP.IX1
;	[CLC]
	ADC CP.IX2
	ROR
	STA CP.IX1
	ENDIF
	DEY
	MIEND
	LDA CP.IX2		;CHECK FOR CORRECT THE RESULT
	CMP I,CP.XLN
	IFCS			;?BEYOND PADDLE RANGE?
	JMP 40$			;INTERSECT TOO FARAWAY
	ENDIF
	CMP I,CP.XLB
	IFCC			;?UNDER THE PADDLE RANGE?
	JMP 40$			;INTERSECT NOT HI ENOUGH
	ENDIF
	CMP I,CP.XLO
	IFCC
	LDA I,CP.XLO+CP.XLO
	SEC
	SBC CP.IX2
	STA CP.IX2
	ENDIF
	LDA CP.IX2		;SAVE THE X INTERCEPT
	STA CP.INX
40$:
	LDA CP.INY
	IFNE			;?IS THERE A Y INTERCEPT?
	LDA CP.INX
	IFNE			;?IS THERE A X INTERCEPT?
	LDA CP.PX1
	CMP CP.PY1
	BCS 50$			;B (X>Y)==>USE Y INTERCEPT
	BCC 60$
	ELSE			;ELSE USE Y INTERCEPT
50$:
	LDA I,CP.YLN		;CONVERT TO PADDLE COORDS
	SEC
	SBC CP.INY
	ASL
	STA J			;DESIRED NEW PADDLE POINT
	LDA I,0			;TURN OFF X INTERCEPT
	STA CP.INX
	ENDIF
	ELSE			;ELSE NO Y INTERCEPT
	LDA CP.INX
	IFNE			;?X INTERCEPT ONLY?
60$:	LDA CP.INX
	SEC
	SBC I,CP.XLN
	ASL
	STA J
	LDA I,0
	STA CP.INY		;TURN OFF ANY Y INTERCEPT
	ENDIF
	ENDIF
	LDA CP.INX
	ORA CP.INY
	IFNE			;?WE HAVE A NEW POSITION?
	LDA CP.INX
	IFNE			;?X INTERCEPT?
	LDA CP.PY1		;GET Y DISTANCE TO ALL
	ELSE			;ELSE Y INTERCEPT
	LDA CP.PX1		;GET X PERPENDIC DISTANCE
	ENDIF
	CMP CP.DIS
	IFCC			;?LESS THAN PREVIOUS BALL'S DISTANCE?
	STA CP.DIS
	LDA J
	STA CP.DPD
	LDX CL.PNM
	LDA X,PD.PX1
	EOR X,PD.PY1
	IFMI
	LDA CP.DPD
	EOR I,0FF
	CLC
	ADC I,1
	STA CP.DPD
	ENDIF
	ENDIF
	ENDIF
	RTS
CPUSLW:				;SLEU PADDLE TOWARDS DESIRED LOC
	LDX CL.PNM
	LDA CP.DPD
	SEC
	SBC X,CP.PDC		;PADDLE CENTER
	BVS 20$			;B ?DEFINATLY TOO FAR AWAY?
	IFMI
	EOR I,0FF
	CLC
	ADC I,1
	ENDIF
	CMP I,3
	IFCS			;?3 OR MORE DOTS AWAY?
20$:	LDA CP.DPD		;THEN SET NEW PADDLE CENTER
	STA X,CP.PDC
	ENDIF
	LDX CL.PNM
	LDA X,CP.PDC
	STA CP.DPD		;OUR NEW DESIRED PADDLE LOC
				;OSCILLATE AROUND OUR DESIRED SPOT
	LDA FRAME
	CLC
	ADC X,CP.PDC
				;WAVE AROUND OUR POINT
				;WAVE PADDLE AROUND POINT
	LSR			;LOOK ALIVE
	LSR
	LSR
	LSR
	BIT BIT08
	IFNE			;CYCLE BACK AND FORTH
	EOR I,0FF
	ENDIF
	AND I,07
	SEC
	SBC I,3
	CLC
	ADC CP.DPD
	SEC
	SBC X,PD.IN1
	IFVS			;?TOO FAR?
	IFMI			;THEN FLIP MAGNITUDE
	LDA I,7E
	ELSE
	LDA I,81
	ENDIF
	ENDIF
	STA J			;SIGNED DIFFERENCE
	IFNE ;?GOING TO MOVE?
	IFMI
	EOR I,0FF
	CLC
	ADC I,1
	ENDIF
	CMP CP.DSS
	IFCS			;?LIMIT OUR MAX MOVEMENT?
	LDA CP.DSS
	ENDIF
	BIT J
	IFMI
	EOR I,0FF
	CLC
	ADC I,1
	ENDIF
	CLC
	ADC X,PD.IN1
	STA X,PD.IN1
	ELSE
	LDA X,PD.FLG
	BIT BIT08
	IFNE ;?HOLDING A BALL?
	AND I,0F7
	STA X,PD.FLG ;TURN OFF HOLD
	AND I,3
	TAX
	LDA X,BL.FLG
	AND I,0F7 ;RELEASE THE HELD BALL
	STA X,BL.FLG
	JSR SPDWHZ
	JSR SNDLBL
	ENDIF
	ENDIF
	RTS

TCIRCLE:	.BYTE 0,3,1,2
TSQUARE:	.BYTE 0,2,3,1
TCPHLD	=.-1
	.BYTE -78.,0-32.,78.-32.
TCPHLM	=.-1
	.BYTE 01F,03F,01F

CPHOLD:
	LDA P.RNDM
	AND I,3
	BEQ 98$ ;B ZERO FAILS
	STA J
				;SELECT WHICH OF THREE OTHERS TO SHOOT AT.
				;J (1=LEFT,2=ACROSS,3=RIGHT)
	LDX CL.PNM
	LDA X,TCIRCL		;PLAYERS NUMBERED CIRCULARLY
	CLC
	ADC J
	AND I,3
	TAY
	LDX Y,TSQUARE		;BRING NUMBERS BACK TO SQUARE MATRIX NUMBERING
	LDA X,TPADSW
	AND PLAYER
	BEQ 98$ ;B AVOID SHOOTING DRONES
	LDA X,PD.FLG
	BPL 98$ ;B PLAYER DEAD, SO NO SHOOT
	LDY J
	LDA FRAME
	AND Y,TCPHLM
	CLC
	ADC Y,TCPHLD
	LDX CL.PNM
	STA X,CP.PDC ;DESIRED NEW LOCATION
	LDA I,0FF ; HOLD THAT BALL
	RTS
98$:	LDA I,0 ;NO HOLD
	RTS

MVPAD:
				;OBTAIN PADDLE INPUTS
	LDX I,3			;C  4 PADDES
	BEGIN
	LDA X,TPADSW 
	BIT PLAYER
	IFNE ;?COMPUTE PLAYERS SHIELD POSITION?
	LDA X,PT.CTR
	SEC
	SBC I,70
	STA X,PD.IN1
	ENDIF
	LDA X,PD.IN1
	IFMI			;?  CHECK THEN NEGATIVE RANGE?
	CMP I,-80.		;NEGATIVE #
	IFCC			;?  WRAP AROUND?
	LDA I,-80.
	ENDIF
	ELSE			;ELSE CHECK POSITIVE OVERFLOW
	CMP I,81. 
	IFCS			;?  WRAP AROUND?
	LDA I,80.
	ENDIF
	ENDIF
	STA X,PD.IN1
	DEX
	MIEND
				;C  INIT PADDLE POSIT
	LDA I,80.
	STA PD.PX1
	STA PD.PX3
	LDA I,80.+16.
	STA PD.PY1
	STA PD.PY2
	LDA I,256.-80.-8.
	STA PD.PY4
	STA PD.PY3
	STA PD.PX2
	STA PD.PX4
				;C  MODIFY PADDLE POSIT
				;**NOTE:ZERO VAL MUST USE Y VERT PADDLE
	LDA PD.IN1		;C  PADDLE 'A'
	IFMI			;?CCW(==>X)?
	LDA PD.PX1
	CLC
	ADC PD.IN1
	STA PD.PX1	
	LDA I,81
	ELSE			;ELSE CW (==>Y)
	LDA PD.PY1
	SEC
	SBC PD.IN1
	STA PD.PY1
	LDA I,42
	ENDIF
	STA PD.PIC		;THEN DRAW IT
	LDA PD.IN3		;C  PADDLE 'C'
	BEQ 25$
	IFMI			;?CCW?
25$:
	LDA PD.PY3
	SEC
	SBC PD.IN3
	STA PD.PY3
	LDA I,42
	ELSE			;ELSE CW
	LDA PD.PX3
	SEC
	SBC PD.IN3
	STA PD.PX3
	LDA I,1
	ENDIF
	STA PD.PIC+2		;THEN DRAW IT
	LDA PD.IN4		;C  PADDLE 'D'
	IFMI			;?CCW?
	LDA PD.PX4
	SEC
	SBC PD.IN4
	STA PD.PX4
	LDA I,1
	ELSE			;ELSE CW
	LDA PD.PY4
	CLC
	ADC PD.IN4
	STA PD.PY4
	LDA I,2
	ENDIF
	STA PD.PIC+3		;THEN DRAW IT
	LDA PD.IN2		;C  PADDLE B
	BEQ 45$
	IFMI			;?CCW?
45$:
	LDA PD.PY2
	CLC
	ADC PD.IN2
	STA PD.PY2
	LDA I,2
	ELSE			;ELSE CW
	LDA PD.PX2
	CLC
	ADC PD.IN2
	STA PD.PX2
	LDA I,81
	ENDIF
	STA PD.PIC+1		;THEN DRAW IT
	LDX I,3
	BEGIN ;C BLANK OUT DEAD PADDLES
	LDA X,PD.FLG
	BIT BIT08
	BNE 65$			;?HOLDING A BALL?
	AND I,40
	IFEQ			 ;?PADDLE INVISIBLE?
65$:
	LDA I,0
	STA X,PD.PIC		;THEN BLANK OUT PADDLE
	ENDIF
	DEX
	MIEND
	RTS

DOCOLL:
	LDA I,0
	STA CL.TST ; PREPARE FOR ANOTHER LEVEL 
	JSR PDCOLL
	LDA CL.TST
	IFNE			;? TEST FOR SCREEN COLLISION?
	JSR SCCOLL
	ENDIF
	RTS
PDCOLL:				;PADDLE COLLISION AGAINST BALL
	LDX CL.BNM
	LDA X,BL.FLG		;C  CHECK FOR PADDLE/SCREEN COLLISION/HELD BALL
	AND I,0C8
	IFNE			;?IS PADDLE COLLISION OR SCREEN COLLISION ALLOWED?
				;THEN CHECK ITS COLLISIONS
	LDA X,BL.PXH
	IFMI			;?IN RIGHT HALF?
	LDA X,BL.PYH
	IFMI			;?IN TOP RIGHT QUADRANT?
	JSR PDDCOL		;THEN POSSIBLE PADDLE D COLLISION
	ELSE			;ELSE IN BOT RIGHT QUAD
	JSR PDBCOL		;C  POSSIBLE PADDLE B COLLISION
	ENDIF
	ELSE			;ELSE IN LEFT HALF
	LDA X,BL.PYH
	IFMI			;?IN TOP LEFT QUADRANT
	JSR PDCCOL		;THEN POSSIBLE PADDLE C COLLISION
	ELSE			;ELSE IN BOTTOM LEFT QUAD
	JSR PDACOL		;C  POSSIBLE PADDLE A COLLISION
	ENDIF
	ENDIF
	ENDIF
	RTS
PDCCOL:				;CHECK FOR COLLISION AGAINST PADDLE C
	LDA I,2
	STA CL.PNM
	LDA I,<80.>+8.		;C JUSTIFY X=<BASE>+IS OUTSIDE RIGHT
	SEC
	SBC X,BL.PXH
	IFPL			;?WITHIN OUTSIDE X BOUNDARY?
	STA CL.BLX
	LDA X,BL.PYH
	SEC
	SBC I,<256.-80.-8>-8.	;C JUSTIFY Y=<BASE>+LOWER IS OUTSIDE
	IFPL			;?WITHIN OUTSIDE Y?
	STA CL.BLY
	LDA PD.IN3
	EOR I,0FF		;C  FLIP THE DIRECTIN
	CLC
	ADC I,1
	STA CL.PDL		;C  PADDLE LOCATION
	JSR PDCHK
	IFNE			;?GOT A COLLISION?
	LDX CL.BNM
	JSR BFLPVY		;C  CHANGE IT FOR QUAD C
	ENDIF
	ENDIF
	ENDIF
	RTS
PDDCOL:			;CHECK FOR COLLISION UPPER RIGHT PADDLE D
	LDA I,3
	STA CL.PNM
	LDA X,BL.PXH
	SEC
	SBC I,<256.-80.-8.>-8.		;C JUSTIFY X=<BASE>+LEFT IS OUTSIDE
	IFPL				;? WITHIN OUTSIDE X BOUNDRY?
	STA CL.BLX
	LDA X,BL.PYH
	SEC
	SBC I,<256.-80.-8>-8.		;C JUSTIFY Y=<BASE>+LOWER IS OUTSIDE
	IFPL				;? WITHIN LOWER Y BOUNDARY?
	STA CL.BLY
	LDA PD.IN4
	STA CL.PDL		;C PADDLE REVOLUTION
	JSR PDCHK
	IFNE			;? BOUNCING OFF?
	LDX CL.BNM
	JSR BFLPVX		;C FLIP BOTH AXIS
	JSR BFLPVY
	ENDIF
	ENDIF
	ENDIF
	RTS
PDACOL:				;CHECK FOR COLLISION, LOWER LEFT
	LDA I,0			;C PADDLE # FOR QUADRANT A
	STA CL.PNM
	LDA I,<80.>+8.		;C JUSTIFY X COORD
	SEC			;C <BASE LOC>+UPPER RIGHT IS OUTSIDE
	SBC X,BL.PXH
	IFPL			;?WITHIN OUTSIDE X BOUNDARY?
	STA CL.BLX
	LDA I,<80.+16.>+8.	;C JUSTIFY Y COORD
	SEC			;C <BASE LOC>+UPPER RIGHT IS OUTSIDE
	SBC X,BL.PYH
	IFPL			;?WITHIN OUTSIDE Y BOUNDARY?
	STA CL.BLY
	LDA PD.IN1		;L PADDLE LOCATION
	STA CL.PDL
	JSR PDCHK
	ENDIF
	ENDIF
	RTS
PDBCOL:				;CHECK FOR COLLISION, LOWER RIGHT PADDLE B
	LDA I,1
	STA CL.PNM
	LDA X,BL.PXH
	SEC
	SBC I,<256.-80.-8>-8	;C JUSTIFY X=<BASE>+LEFT IS OUTSIDE
	IFPL			;? WITHIN LEFT X BOUNDARY?
	STA CL.BLX
	LDA I,<80.+16.>+8	;JUSTIFY Y=<BASE>+ABOVE IS OUTSIDE
	SEC
	SBC X,BL.PYH
	IFPL			;?WITHIN ABOVE Y BOUNDARY?
	STA CL.BLY
	LDA PD.IN2
	EOR I,0FF		;C FLIP THE DIRECTION OF PADDLE MOVE
	CLC
	ADC I,1
	STA CL.PDL
	JSR PDCHK
	IFNE			;? BOUNCED AWAY?
	LDX CL.BNM
	JSR BFLPVX		;C REVERSE X DIRECTION
	ENDIF
	ENDIF
	ENDIF
	RTS
PDCHK:				;ASSUMES LOWER LEFT QUAD
	LDX CL.PNM
	LDA X,PD.FLG
	AND I,40
	BEQ 50$			;?PADDLE ALIVE?
	LDX CL.BNM
	LDA X,BL.FLG
	BIT BIT08
	IFNE			;?BALL HELD?
	JMP PDRLSE		;C  ATTEMPT TO RELEASE BALL
	ENDIF			;ELSE NOT HELD
	AND I,40
	BEQ 50$			;?PADDLE COLLISION ALLOWED?
	LDA I,0			;RETURN C REG NON-ZERO==>COLLISION
	PHA			;**
	LDY CL.PNM
	LDA Y,TPADSW
	AND PLAYER
	IFNE			;?PLAYER?
	LDA I,17.+4
	ELSE			;ELSE DRON PADDLE SIZE
	LDA I,17.
	ENDIF
	STA J
	LDA CL.PDL
	IFMI			;?CCW, PADDLE GOING HORIZ X?
	LDA CL.BLY		;THEN CHECK Y LIMIT FIRST
	CMP J
	IFCC			;?BUT NOT TOO FAR AWAY?
				;THEN CLOSE ENOUGH FOR Y
	LDA I,16.
	SEC
	SBC CL.BLX
	SEC
	SBC CL.PDL
	IFPL			;?TO THE RIGHT OF PADDLE?
	CMP I,17.
	IFCC			;?BUT STILL CLOSE ENOUGH?
	JSR PDXTOY		;THEN WE HAVE COLLISION-SHOOT IT AWAY
	JSR PDBNCE
	PLA			;**
	PHP			;**STORE A NON-ZERO
	ENDIF
	ENDIF
	ENDIF
	ELSE			;ELSE CW,PADDLE GOING VERT Y
				;C  CHECK X FIRST
	LDA CL.BLX
	CMP J
	IFCC			;?BUT NOT TOO FAR OVER?F
				;THEN CLOSE ENOUGH IN HORIZ X
	LDA I,16.
	SEC
	SBC CL.BLY
	CLC
	ADC CL.PDL		;C  ADJUST FOR POSITIVE PADDLE LOC
	IFPL			;?TO THE TOP OF PADDLE?
	CMP I,17.
	IFCC			;?BUT STILL CLOSE ENOUGH?
	JSR PDYTOX		;THEN WE HAVE COLLISION-SHOOT IT
	JSR PDBNCE
	PLA			;**
	PHP			;**
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	PLA			;**
	BNE 80$			;?NO PADDLE COLLISION?
50$:				;?OR CASTLE DEAD?
	INC CL.TST		;THEN TEST SCREEN COLLISIONS
	LDA I,0
80$:
	RTS
PDRLSE:				;ATTEMPT TO RELEASE BALL
	LDX CL.PNM
	LDA X,TPADSW
	AND PLAYER
	AND ATRACT
	IFNE ;?ONLY PLAYERS HAVE SWITCH CONTROLS?
	AND SWSTAT+3
	IFNE			;?SWITCH RELEASED?
	LDA X,PD.FLG
	AND I,0F7		;C  BAL NO LONGER HELD
	STA X,PD.FLG
	LDX CL.BNM
	LDA X,BL.FLG
	AND I,37		;C  BALL NOT HELD,NO SCREEN COLLISION, NO PADDLE COLLISION
	ORA I,4			;C  BALL OWNED
	STA X,BL.FLG
	JSR SPDWHZ		;C  WHIZ THE BALL OUT
	JSR SNDLBL		;C  LAUNCHING BALL FROM CASTEL
	ENDIF
	ENDIF
	LDA I,0			;C   NO BOUNCE
	RTS
PDXTOY:				;CONVERT A REG X COLLISION
	LDX CL.BNM		;DISTANCE TO NEW Y VELOCITY
	SEC
	SBC I,8			;C  DIVIDE DISTANCE IN HALF
	IFPL			;?PROCESS RIGHT HALF OF PADDLE?F
	TAY
	LDA I,119.
	STA X,BL.VYB		;C  PERPENDIC TO X==> Y
	LDA Y,TBMIN8
	STA X,BL.VXB		;C  MINOR AXIS
	ELSE			;ELSE LEFT BONUCE
	EOR I,0FF
	TAY
	LDA I,119.
	STA X,BL.VYB		;C  PADDLE X HORIZ==> MAJOR Y
	LDA Y,TBMIN8		;C  MINOR AXIS
	EOR I,0FF		;C  FLIP TO NEGATIVE X
	STA X,BL.VXB
	ENDIF
	RTS
PDYTOX:				;A REG: Y DISTANCE TO COLLISION
				;CALC BOUNCE ALONG MAJOR X AXIS
				;SINCE BALL BOUNCED OFF VERT Y PADDLE
	LDX CL.BNM
	SEC
	SBC I,8			;C  BOUNCE TO TOP OR BOTTOM
	IFPL			;?COLLISION ON TOP OF PADDLE?
	TAY			;THEN BOUNCE UPWARD
	LDA I,119.		;C  MAJOR BOUNCE AXIS
	STA X,BL.VXB		;C  PERPENDICULAR TO Y==> X
	LDA Y,TBMIN8
	STA X,BL.VYB		;C  MINOR AXIS, UPWARD
	ELSE			;ELSE BOUNCE DOWNWARD
	EOR I,0FF
	TAY
	LDA I,119.		;C  PADDLE VERT==> X=MAJOR AXIS
	STA X,BL.VXB
	LDA Y,TBMIN8		;C  MINOR AXIS
	EOR I,0FF		;C  FLIP TO BOUNCE DOWN
	STA X,BL.VYB
	ENDIF
	RTS
TBMIN8:
	.BYTE 53.
	.BYTE 53.
	.BYTE 53.
	.BYTE 53.
	.BYTE 113.
	.BYTE 113.
	.BYTE 113.
	.BYTE 113.
	.BYTE 113.
RNYTOX:			;A:=0-7 DOWN BOUNCE, 8-15 UP BOUNCE
				;BOUNCE RIGHT OFF VERTICAL Y LINE
	SEC
	SBC I,8
	IFPL			;?WANT TO BOUNCE UPWARD?
	TAY
	LDA Y,TSMIN8		;C VARIABLE SPEED UP
	STA X,BL.VYB
	LDA I,119.		;C FULL SPEED TO RIGHT
	STA X,BL.VXB
	ELSE			;ELSE BOUNCE DOWNWARD
	EOR I,0FF		;C COMPLEMENT INTO 0-7 TABLE DIP
	TAY
	LDA Y,TSMIN8		;C VARIABLE SPEED
	EOR I,0FF		;C DOWNWARD
	STA X,BL.VYB
	LDA I,119.
	STA X,BL.VXB
	ENDIF
	RTS
RNXTOY:			;A:=0-7 LEFT BOUNCE, 8-15 RIGHT BOUNCE
				;BOUNCE UP OFF HORIZ X LINE
	SEC
	SBC I,8
	IFPL			;?WANT TO BOUNCE RIGHT?
	TAY
	LDA Y,TSMIN8		;C VARIABLE SPEED RIGHT
	STA X,BL.VXB
	LDA I,119.		;C FULL SPEED UP
	STA X,BL.VYB
	ELSE			;ELSE BOUNCE LEFT
	EOR I,0FF		;C COMPLEMENT INTO 0-7 TABLE DISP
	TAY
	LDA Y,TSMIN8		;C VARIABLE SPEED
	EOR I,0FF		;C DOWNWARD
	STA X,BL.VXB
	LDA I,119.
	STA X,BL.VYB
	ENDIF
	RTS
TSMIN8:
	.BYTE 47.
	.BYTE 59.
	.BYTE 67.
	.BYTE 79.
	.BYTE 89.
	.BYTE 101.
	.BYTE 107.
	.BYTE 113.
PDBNCE:			;BOUNCED OFF PADDLE
	LDX CL.BNM
	LDY CL.PNM
	LDA Y,TPADSW
	AND PLAYER
	IFNE			;?PLAYER HIT THIS BALL?
	LDA X,BL.FLG
	BIT BIT04
	IFNE			;?BALL OWNED?
	AND I,3
	TAY
	LDA Y,TPADSW
	AND PLAYER
	IFEQ			;?PLAYER HIT A NON-PLAYER BALL?
	LDA X,BL.FL2		;THEN ALOW HIM TO HIT DRONE SOONER
	BIT BIT08
	IFNE
	LDA I,7
	ENDIF
	AND I,7
	LDY LF.PLA
	DEY
	BEQ 8$
	LSR
	DEY
	BEQ 8$
	LSR
8$:	;SHIFTS PER PLAYER-- 1==>NONE,2==>/2,3==>/4
	SEC
	ADC CP.PLH
	STA CP.PLH
	ENDIF
	ENDIF
	ELSE			;ELSE DRONE HIT BALL
	LDA X,BL.FLG
	BIT BIT04
	IFNE			;?BALL OWNED?
	AND I,3
	TAY
	LDA Y,TPADSW
	AND PLAYER
	IFNE			;?SENT BY PLAYER?
	INC CP.PDP
	ENDIF
	LDA LF.PLA
	CMP I,1
	IFEQ			;?ONE PLAYER?
	LDA I,8			;RESET 2ND BALL LAUNCH COUNT
	STA LA.CNT
	ENDIF
	ENDIF
	ENDIF
	LDA X,BL.FLG
	AND I,08	;IS BALL FREE?-NOT HELD
	BNE 20$			
	LDY CL.PNM
	LDA Y,PD.FLG
	EOR ATRACT		;REVERSE SENSE IF GAME
	AND I,8
	BEQ 20$			;B GAME AND HOLD BALL
				;B ATTRACT, NOT HOLD BALL
	LDA Y,TPADSW
	BIT PLAYER		;DRONES DO NOT HOLD-YET
	IFEQ ;?DRONE HITTING BALL?
	LDA X,BL.FLG
	BIT BIT04
	BEQ 5$ ;B BALL IS FREE-JUST COLLIDED
	LDA P.RNDM
	AND I,7F
	CMP CP.PHN
	BCS 20$ ;B GREATER THAN FUDGE--TRY LATER
5$:
	JSR CPHOLD
	BEQ 20$ ;B ZERO - NO HOLD - TRY LATER
	BNE 10$ ;B VALUE - HOLD THE BALL
	ENDIF
	AND SWSTAT+3		;PLAYER HITTING THE BALL
	IFEQ			;?HOLDNG BUTTON PRESSED?
	DEC LA.CNT		;LAUNCH 2ND BALL SOONER IF PLAYER HITS BALL
10$:
	LDX CL.PNM
	LDA X,PD.FLG		;C  CHECK FOR SPACE AVAILABLE
	AND I,0FC		;C  CLEAR BALL#
	ORA I,8			;C  SET HOLDING FLAG
	ORA CL.BNM		;C  SET NEW BALL #
	STA X,PD.FLG
	LDX CL.BNM
	LDA X,BL.FLG
	AND I,38		;C NO MORE PADDLE COLLISION, CLEAR OWNER,NO SCREEN
	ORA CL.PNM		;C PADDLE DOING HOLDNG
	ORA I,0C		;C HELD BY PADDLE,OWNED
	STA X,BL.FLG
	LDA X,BL.FL2
	AND I,0F7		;TURN OFF WHIZ
	STA X,BL.FL2
	LDA I,-9
	STA X,DZ.CNT
	JSR SNDPHT
	ELSE
20$:	; BOUNCE THE BALL AWAY
	LDX CL.BNM
	LDA X,BL.FLG		;C  DISALLOW FURTHER COLLISION WITH THIS PADDLE
	AND I,030
	ORA I,4			;C  BALL OWNED BY A PADDLE
	ORA CL.PNM		 ;C IDENTIFY WHO TEMPORARILY OWNS THIS PADDLE
	STA X,BL.FLG		;C  RANDOMIZE THE BOUNCES-PREVENT LOCKUP
	LDY CL.PNM
	LDA Y,TPADSW
	AND PLAYER
	IFEQ			;?DRONE?
	JSR RNBNCE
	ELSE
	LDA CL.PNM
	ASL
	ASL
	EOR FRAME+1
	AND I,0C
	EOR FRAME+1
	AND I,0F
	EOR X,BL.VYB
	STA X,BL.VYB		;
	LDA CL.PNM
	ASL
	ASL
	EOR FRAME+1
	AND I,0C
	EOR FRAME+1
	AND I,0F
	EOR X,BL.VXB
	STA X,BL.VXB		;
	ENDIF
	JSR SPDUP		;THEN SPEED BALL UP
	JSR SPDBAS
				;C GIVE POINTS FOR DEFLECTING BALL
	JSR SNDPHT		 ;C SOUND OF PADDLE HITTING BALL
	ENDIF
	RTS
SCCOLL:				;SCREEN COLLISION
	LDX CL.BNM
	LDA X,BL.FLG
	IFMI			;?COLLISION ALLOWED?
	LDA I,<SCRFLD/400>&3F
	STA ADH
	LDA I,251.		;C  CONVERT Y
	SEC
	SBC X,BL.PYH
	AND I,0F8		;C  Y*32/8==>Y*4
	ASL
	ROL ADH
	ASL
	ROL ADH
	STA ADL
	LDA I,4			;C  X/8
	CLC
	ADC X,BL.PXH
	LSR
	LSR
	LSR
	ORA ADL
	STA ADL
	LDY I,0
	JSR SC9TST
	IFCS			;?HIT A BRICK?
	LDA I,8 ;RESET LAUNCH TIMER
	STA LA.CNT
	LDA X,BL.FL2		;?BREAKOUT?
	BMI 10$
	LDA X,BL.FLG
	AND I,8		;?NOT HELD
	BNE 10$
	LDA X,PD.FLG
	IFEQ			;?CASTLE DEAD/BREAKOUT MODE/BALL HELD/
10$:	LDA I,0
	STA NY,ADL
	ELSE			;ELSE TAKE A BIG CHUNK FROM OUTSIDE
	LDX CL.BNM
	JSR SC9DES
	ENDIF
	JSR SCBNCE
	ELSE
	LDA NY,ADL
	AND I,3F
	AND ATRACT		;ATTRACT DOES NOT KILL CASTLES
	IFNE			;?HIT SOMETHING?
	CMP I,59.		;C  INGNORE CASTLE FILL IN
	IFCC			;?CASTLE COURTYARD?
	LDA X,BL.FLG
	AND I,8
	IFEQ			;?NOT HELD
	JSR KILCSL		;THEN KILL THE CASTLE
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	RTS
SC9TST:			;TEST THE BRICKS TOUCHING THE FIREBALL
	CLC ;NO COLLISION YET
	LDA X,BL.VYH
	IFPL			;?BALL GOING UP?
	JSR SC3TOP		;TEST FROM TOP DOWN
	IFCC			;?NO BRICK HIT?
	JSR SC3MID		;NEXT TEST MIDDLE ROW
	IFCC			;?STILL NO BRICK HIT?
	JSR SC3BOT		;LAST CHANCE-TEST BOTTOM ROW
	ENDIF
	ENDIF
	ELSE			;ELSE BALL GOING DOWN
	JSR SC3BOT		;TEST FRONT TO BACK
	IFCC			;?NO BRICK FOUND?
	JSR SC3MID		;TEST MIDDLE ROW
	IFCC			;?STILL NO BRICK FOUND?
	JSR SC3TOP		;FINALLY TEST ROW IN BACK
	ENDIF
	ENDIF
	ENDIF
	IFCS			;?ENCOUNTER A BRICK?
	LDA AD2L		;THEN POINT TO IT
	STA ADL
	LDA AD2H
	STA ADH
	ENDIF
	RTS
SC3MID:
	LDA ADL			;CALC ROW ADDRESS
	STA AD2L
	LDA ADH
	STA AD2H
	JSR SC3TST		;TEST THE ROW
	RTS
CKS2:	.BYTE GCKS2
SC3BOT:	LDA X,BL.PYH
	AND I,4
	IFNE			;?BALL POSITION TOUCHING MIDDLE AND BOTTOM?
	LDA ADL			;THEN CALC ROW ADDRESS
	CLC
	ADC I,32.
	STA AD2L
	LDA ADH
	ADC I,0
	STA AD2H
	LDAL M.BASE-1
	CMP AD2L
	LDAH M.BASE-1
	SBC AD2H
	IFCS			;?ROW EXIST(NOT TOO HI)?
	CLC
	JSR SC3TST		;THEN TEST THE ROW
	ENDIF
	ENDIF
	RTS

SC3TOP:
	LDA X,BL.PYH
	AND I,4
	IFEQ			;?BALL TOUCHING MIDDLE AND TOP?
	LDA ADL			;THEN CALC ROW ADDRESS
	SEC
	SBC I,32.
	STA AD2L
	LDA ADH
	SBC I,0
	CMP I,<SCRFLD/100>
	IFCS			;?STILL ON SCREEN?
	CLC
	STA AD2H
	JSR SC3TST		;THEN CHECK FOR BRICKS
	ENDIF
	ENDIF
	RTS
SC3TST:
	LDA X,BL.VXH
	IFMI			;?GOING TO LEFT?
	JSR SC1LFT		;THEN TEST LEFT TO RIGHT-FRONT TO BACK
	IFCC			;?NO BRICK HIT?
	JSR SC1MID		;THEN TEST MIDDLE STAMP
	IFCC			;?STILL NO BRICK?
	JSR SC1RHT		;THEN TEST RIGHT STAMP
	ENDIF
	ENDIF
	ELSE			;ELSE GOING RIGHT
	JSR SC1RHT		;SO TEST RIGHT TO LEFT-FRONT TO BACK
	IFCC			;?NO BRICK SOUND?
	JSR SC1MID		;THEN TEST MIDDLE STAMP
	IFCC			;?STILL NO BRICK?
	JSR SC1LFT		;THEN TEST LEFT BRICK
	ENDIF
	ENDIF
	ENDIF
	RTS


SC1MID:			;TEST MIDDLE STAMP
	LDA NY,AD2L
	AND I,3F
	CMP I,59.
	RTS
SC1LFT:	LDA X,BL.PXH		;TEST LEFT STAMP
	AND I,4
	IFNE			;?BALL TOUCHING MIDDLE AND LEFT STAMP?
	LDA AD2L
	AND I,1F
	IFNE			;?AWAY FROM LEFT EDGE OF SCREEN?
	DEC AD2L		;POINT TO LEFT STAMP
	LDA NY,AD2L
	AND I,3F
	CMP I,59.
	IFCC			;?NO COLLISION?
	INC AD2L		;THEN CORRECT OUR PERTURBATION
	ENDIF
	ENDIF
	ENDIF
	RTS
SC1RHT:			;TEST RIGHT STAMP
	LDA X,BL.PXH
	AND I,4
	IFEQ
	INC AD2L
	LDA AD2L
	AND I,1F
	IFNE			;?STILL ON SAME ROW?
	LDA NY,AD2L
	AND I,3F
	CMP I,59.
	ENDIF
	IFCC			;?NO BRICK FOUND?
	DEC AD2L		;RESET STAMP POINTER
	ENDIF
	ENDIF
	RTS
SCBNCE:	LDX CL.BNM			;BOUNCE OFF SCREEN COLLISION
	LDA X,BL.FL2
	BIT BIT08
	IFNE			;? WHIZ MODE?
	AND I,0F7		;C TURN OFF WHIZ
	STA X,BL.FL2
	ELSE			;ELSE SOW DOWN BALL
	LDA X,BL.FL2
	IFPL			;?NOT BREAKOUT MODE?
				;?RANDOM BALL SLOWDOWN?
	JSR SPDWN
	ENDIF
	ENDIF
	JSR SNDCBH
	JSR RNBNCE
	LDA X,BL.PXH		;C ATTATCH VELOCITY TO THE CORRECT QUADRANT
	EOR X,BL.FL2
	IFMI			;? QUADS 'B' OR 'D'?
	LDA I,0FF
	EOR X,BL.VXB		; THEN MOVER 'X' TO LEFT
	STA X,BL.VXB
	ENDIF
	LDA X,BL.PYH
	EOR X,BL.FL2
	IFMI			;?QUADS 'C' OR 'D'?
	LDA I,0FF
	EOR X,BL.VYB		;THEN MOVE 'Y' TO DOWN
	STA X,BL.VYB
	ENDIF
	LDY CL.PNM
	LDA Y,PD.FLG
	IFMI			;?PLAYER ALIVE?
	LDA Y,TPADSW
	AND PLAYER
	IFEQ			;?HIT A DRONE?
	LDA X,BL.FLG
	BIT BIT04
	IFNE			;?OWNED?
	AND I,3
	TAY
	LDA Y,TPADSW
	AND PLAYER
	IFNE			;?DRONE BIT BY PLAYER?
	INC CP.DRH
	ENDIF
	ENDIF
	ELSE			;ELSE HIT A PLAYER
	LDA X,BL.FLG
	BIT BIT04
	IFNE			;?OWNED?
	AND I,3
	TAY
	LDA Y,TPADSW
	AND PLAYER
	IFEQ			;?PLAYER HIT BY DRONE?
	LDA X,BL.FL2
	BIT BIT08
	IFNE
	LDA I,7
	ENDIF
	AND I,7
	LDY LF.PLA
	DEY
	BEQ 8$
	LSR
	DEY
	BEQ 8$
	LSR
8$:
	SEC
	ADC CP.PLH
	STA CP.PLH
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	JSR SPDBAS
	JSR VALBRK
	LDX CL.BNM
	LDA X,BL.FLG		;C ONLY HIT BRICKS ONCE
	AND I,7F
	STA X,BL.FLG
	LDA X,BL.FL2
	IFPL			;?NOT BREAKOUT?
	LDA X,BL.FLG		;
	AND I,0F8		;C NO LONGER OWNED
	STA X,BL.FLG
	ENDIF
	RTS
RNBNCE:
	LDX CL.BNM
	LDA I,136.-4.		;C  CORRECT THE Y, GET ABSOLUTE VALUE
	CMP X,BL.PYH
	IFCS			;?BOTTOM SIDE OF BOUNCE ORIGIN?
;	[SEC]
	SBC X,BL.PYH
	ELSE			;ELSE TOP POSITIVE SIDE OF BOUNCE ORIGIN
	LDA X,BL.PYH
;	[CLC]
	ADC I,-136.+256.+4
	ENDIF
	STA J
	LDA I,120.-4		;C  CONVERT X TO BOUNCE ORIGIN
	CMP X,BL.PXH
	IFCS			;?LEFT NEGATIVE SIDE OF BOUNCE ORIGIN?
;	[SEC]
	SBC X,BL.PXH
	ELSE			;ELSE RIGHT POSITIVE SIDE
	LDA X,BL.PXH
;	[CLC]
	ADC I,-136.+256.+4
	ENDIF
	CMP J
				;C  ABS(DELX)>ABS(DELY)<==>CARRY SET
				;C  MAJOR BOUNCE
				;C  X>=Y==>POSITIVE Y
				;C  X<Y==> POSITIVE X
	LDA P.RNDM
	AND I,0F
	LDY X,BL.FL2
	IFMI			;?BREAKOUT MODE?
	ORA I,8			;THEN LIMIT ANGLE
	ENDIF
	IFCS			;? XZY (BALL IN LEFT OR RIGHT SIDE)
	JSR RNXTOY		;THEN MAJOR BOUNCE IN Y DIRECTION
	ELSE			;ELSE X<Y (BALL IN TOP OR BOTTOM
	JSR RNYTOX		;C MAJOR BOUNCE IN X DIRECTION
	ENDIF
	RTS

SC9DES:			;DESTROY 3X3 BLOCK OF CASTLE
	LDA X,BL.FL2
	AND I,0F		;C CONVERT (WHIZ,6 SPEEDS) TO (1-6) BRICKS
	LSR
	CMP I,5
	IFCS
	LDA I,5
	ENDIF
	STA SC.CNT
	LDA ADL
	STA AD2L
	LDA ADH
	STA AD2H
	JSR SCRDES		;DESTROY 3 BRICKS IN CURRENT ROW
				;C CHECK FOR FIRST ROW OF SCREEN
	BIT SC.CNT
	IFPL			;?SHOULD WE DESTROY MORE BRICKS?
				;? IN 2ND OR LATER ROWS?
	LDA ADL			;THEN PROCESS PREVIOUS ROW
	SEC
	SBC I,32.
	STA AD2L
	LDA ADH
	SBC I,0
	CMP I,<SCRFLD/100>
	IFCS			;?STILL ON SCREEN?
	STA AD2H		; THEN DESTROY ROW OF 3 BRICKS
	JSR SCRDES
	ENDIF
	BIT SC.CNT
	IFPL			;?SHOULD WE DESTROY MORE BRICKS?
	LDA ADL
	CLC
	ADC I,32.
	STA AD2L
	LDA ADH
	ADC I,0
	STA AD2H
	LDAL M.BASE-1
	CMP AD2L
	LDAH M.BASE-1
	SBC AD2H
	IFCS			;?SCREEN LOCATION NOT PAST SCREEN-INTO MOTION OBJECT?
	JSR SCRDES		;THEN DESTROY THREE MORE BRICKS
	ENDIF
	ENDIF
	ENDIF
	RTS

SCRDES:				;DESTROY ROW OF 3 BRICKS
	LDA NY,AD2L
	AND I,3F
	CMP I,59.
	IFCS			;?SOMETHING VALUABLE?
	LDA I,0			;C THEN THE BRICK VANISHES
	STA NY,AD2L
	DEC SC.CNT
	ENDIF
	BIT SC.CNT
	IFPL			;?SHOULD WE DESTROY MORE BRICKS?
	LDA AD2L
	AND I,1F
	IFNE			;?NOT ON LEFT EDGE OF SCREEN?
	DEC AD2L		;C PROCESS LEST STAMP
	LDA NY,AD2L		;C DESTROY LEFT BRICK
	AND I,3F
	CMP I,59.
	IFCS			;?PART OF CASTLE?
	LDA I,0
	STA NY,AD2L		;THEN DESTROY THE BRICK
	DEC SC.CNT
	ENDIF
	INC AD2L
	ENDIF
	BIT SC.CNT
	IFPL
	INC AD2L		;C PROCESS RIGHT BRICK
	LDA AD2L
	AND I,1F
	IFNE			;?STILL ON SAME ROW?
	LDA NY,AD2L
	AND I,3F
	CMP I,59.		;
	IFCS			;?PART OF CASTLE?
	LDA I,0
	STA NY,AD2L		;THEN DESTROY RIGHT BRICK
	DEC SC.CNT
	ENDIF
	ENDIF
	DEC AD2L		;C RESTORE ADDRESS
	ENDIF
	ENDIF
	RTS
BFLPVX:				;BALL, FLIP X VELOCITY
	LDA X,BL.VXL
	EOR I,0FF
	CLC
	ADC I,1
	STA X,BL.VXL
	LDA X,BL.VXH
	EOR I,0FF
	ADC I,0
	STA X,BL.VXH
	LDA X,BL.VXB
	EOR I,0FF
	STA X,BL.VXB
	RTS
BFLPVY:				;BALL, FLIP Y VELOCITY
	LDA X,BL.VYL
	EOR I,0FF
	CLC
	ADC I,1
	STA X,BL.VYL
	LDA X,BL.VYH
	EOR I,0FF
	ADC I,0
	STA X,BL.VYH
	LDA X,BL.VYB
	EOR I,0FF
	STA X,BL.VYB
	RTS

SPDBAS:
	LDA X,BL.FL2
	BIT BIT08
	IFNE			;?WHIZ MODE?
	LDA I,5
	ENDIF
	AND I,7
SPDMLT:				;VELOCITY=BASE SPEED*MULTIPLIER
	TAY			;C LOOP COUNTER ;Y:=MULTIPLIER, BASE IS ZERO
	PHA			;C SAVE FOR LATER ;X:=BALL #
	LDA I,0
	STA X,BL.VXL
	STA X,BL.VXH
	STA X,BL.VYH
	STA X,BL.VYL
	LDA X,BL.VXB
	IFPL			;?POSITIVE?
	ASL
	STA X,BL.VXL
	BCC 10$			;J ALWAYS-JUST DID ONE LOOP
	BEGIN
	LDA X,BL.VXB
	ASL			;C POSITIVE, CLEARS CARRY,*2
	ADC X,BL.VXL
	STA X,BL.VXL
	IFCS			;?OVERFOW?
	INC X,BL.VXH
	ENDIF
10$:	DEY
	MIEND
	ELSE			;ELSE NEGATIVE SPEED
	BEGIN
	LDA X,BL.VXB
	ASL			;C DOUBLE, SET CARRY
	ADC X,BL.VXL
	STA X,BL.VXL
	IFCC			;?BORROW?
	DEC X,BL.VXH
	ENDIF
20$:	DEY
	MIEND
	ENDIF
	PLA			;C CONVERT Y SPEED
	TAY
	LDA X,BL.VYB
	IFPL			;?POSITIVE?
	ASL
	STA X,BL.VYL
	BCC 30$			;J ALWAYS-JUST DID ONE LOOP
	BEGIN
	LDA X,BL.VYB
	ASL			;C POSITIVE, CLEARS CARRY,*2
	ADC X,BL.VYL
	STA X,BL.VYL
	IFCS			;?OVER FLOW?
	INC X,BL.VYH
	ENDIF
30$:	DEY
	MIEND
	ELSE			;ELSE NEGATIVE SPEED
	BEGIN
	LDA X,BL.VYB
	ASL			;C DOUBLE, SET CARRY
	ADC X,BL.VYL
	STA X,BL.VYL
	IFCC			;?BORROW?
	DEC X,BL.VYH
	ENDIF
40$:	DEY
	MIEND
	ENDIF
	RTS
SPDWN:			;SOW DOWN SPEED MULTIPLIER
	LDA LF.DRA
	IFEQ			;?NO DRONES LEFT?
	LDA LF.PLA
	CMP I,2			;?ONLY TWO PLAYERS LEFT?
	BEQ 90$			;B EXIT
	ENDIF
	LDA X,BL.FL2
	AND I,7
	IFNE			;?ABLE TO SLOW DOWN BALL
	DEC X,BL.FL2
	ENDIF
90$:
	RTS
SPDUP:				;INCREASE THE SPEED MULTIPLIER
	LDX CL.BNM
	LDA X,BL.FL2
	AND I,7
	CMP I,5
	IFCC			;?ABLE TO SPEED UP?
	CMP I,2
	BCC 20$			;B BUMP 0,1, ONE UP
	STA K
	LDY CL.PNM
	LDA Y,TPADSW
	AND PLAYER
	BEQ 90$			;B DRONES KEEP SPLED SLOW
	LDA K
	CMP I,3
	IFCC			;?SPEED 2?
	LDA I,128.		;EVERY 2 HITS
	ELSE
	IFEQ			;?SPEED 3?
	LDA I,128.		;EVERY 2 HITS
	ELSE			;ELSE SPEED 4
	LDA I,64.		;EVERY 4 HITS
	ENDIF
	ENDIF
	CMP FRAME
	IFCS			;?ONLY CERTAIN FRACTION IS SPED UP?
20$:	INC X,BL.FL2
	ENDIF
90$:
	ENDIF
	RTS
SPDWHZ:				;TEMPORARILY WHIZ THE BALL, IGNORE MULTIPLIER
	LDA X,BL.FL2
	ORA I,8			;C TURN ON WHIZ
	STA X,BL.FL2
	LDA I,3
	JMP SPDMLT
KILCSL:  ;KILL OFF A CASTLE
	LDA X,BL.FL2		;C TURN ON BREAKOUT MODE
	ORA I,80
	STA X,BL.FL2
	LDX CL.PNM
	LDA X,PD.FLG
	IFMI
	LDA X,TPADSW
	AND PLAYER
	IFEQ ;?DRONE KILLED?
	INC CP.DRH ;RECORD IT
	ENDIF
	LDX I,3
	JSR LAUNCH		 ;C SET OFF RETALIATORY STRIKE
	TXA
	IFPL ;?BALL AVAILABLE TO LAUNCH?
	LDY CL.BNM ; THEN START AT CURRENT BALL LOCATION
	LDA Y,BL.PXH
	STA X,BL.PXH
	LDA Y,BL.PYH
	STA X,BL.PYH
	LDA Y,BL.VXB
	EOR I,0FF
	STA X,BL.VXB
	LDA Y,BL.VYB
	EOR I,0FF
	STA X,BL.VYB
	LDA I,14			;BALL ALIVE, OWNED
	ORA CL.PNM
	STA X,BL.FLG
	LDA Y,BL.FL2
	AND I,1F
	ORA I,18		;BALL ALIVE, WHIZ
	STA X,BL.FL2
	JSR SPDBAS
	ENDIF
	LDX CL.BNM
	LDA X,BL.FL2
	AND I,0F8
	ORA I,5
	STA X,BL.FL2
	JSR SPDBAS
	LDX CL.PNM ;C KILL THE PADDLE
	LDA X,PD.FLG
	BIT BIT08
	IFNE			;?HOLDNG A BALL?
	AND I,3
	TAX
	LDA X,BL.FLG
	AND I,0F7		;C TURN OFF HOLD
	STA X,BL.FLG
	JSR SPDWHZ
	LDX CL.PNM
	LDA I,0			;TURN OFF DRIZZLE PIC
	STA X,PD.PIC
	ENDIF
	JSR EXPBGN
	LDA ATRACT
	IFMI
	JSR VALCSL		;C GIVE POINTS FOR KILLING CASTLE
	JSR SNDCEX		 ;C SOUND FOR CASTLE EXPLODING
	JSR LIFGON		;AWARD POINTS AND BONUS LINES BEFORE TESTING LIVE LEFT
	ENDIF
	ENDIF
	RTS



	.SBTTL MESSAGES
CLRMSB:
	LDA I,40		;CLEAR BOTTOM MESSAGE
	STA MS.MSK
	BNE WRTMS1
CLRMES:
	LDA I,0C0		;CLEAR TOP AND BOTTOM
	STA MS.MSK
	BNE WRTMS1		;J WRITE BLOCK AND RESET
WHLMST:
	LDA I,0BF		;WRITE TOP BLOCK
	STA MS.MSK
	BNE WRTMS1		;J WRITE BLOCK, RESET
WHLMSB:
	LDA I,07F		;WRITE BOTTOM BLOCK
	STA MS.MSK
	BNE WRTMS1		;J WRITE BLOCK;RESET
WHLMES:
	LDA I,0FF		;WRITE, TOP+BOTTOM
	STA MS.MSK
WRTMS1:				;MASK ALREADY DEFINED
	LDA I,7F
	STA MS.NUM
	JSR WRTBLK		;WRITE WHOLE BLOCK
	LDA I,0FF
	STA MS.NUM		;PREPARE FOR NEW MSG
	RTS
TYPMST:
	LDA I,0BF
	BNE TYPM
TYPMSB:	LDA I,07F
	BNE TYPM
TYPMES:
	LDA I,0FF		;WRITE TOP AND BOTTOM
TYPM:
	STA MS.MSK
	LDA FRAME
	AND I,1
	IFEQ			;?TYPE ONE MORE CHAR?
	INC MS.NUM
	ENDIF
WRTBLK:
	BIT SWSTAT
	IFVS			;?UPRIGHT?
	LDA MS.MSK
	AND I,7F		;ONLY WRITE UPRIGHT
	STA MS.MSK
	ENDIF
	LDA SWSTAT
	AND I,8
	IFNE			;?TWO PLAYER MAX?
	CPY I,MS.9AC
	IFEQ
	LDY I,MS.2AC
	ENDIF
	ENDIF
	LDA SWSTAT
	AND I,20
	IFNE			;?ONE PLAYER TWO COINS?
	CPY I,MS.1PC
	IFEQ
	LDY I,MS.1PD
	ENDIF
	CPY I,MS.1BG
	IFEQ
	LDY I,MS.1AC
	ENDIF
	ENDIF
	LDA SWSTAT
	AND I,10
	IFNE			;?2-4 PLAYERS COST 2 COINS?
	CPY I,MS.2PC
	IFEQ
	LDY I,MS.2PD
	ENDIF
	CPY I,MS.3PC
	IFEQ
	LDY I,MS.3PD
	ENDIF
	CPY I,MS.4PC
	IFEQ
	LDY I,MS.4PD
	ENDIF
	ENDIF
	LDA MS.NUM
	STA MS.CNT		;MAX # OF CHARS TO WRITE
				;BLOCK #
	TYA			;INCLUDE FOREIGN LANGUAGES
	EOR SWSTAT
	AND I,0FC
	EOR SWSTAT		;INTO LOW 2 BITS
	ASL			;CONVERT TO WORD ADDRESS
	TAY
	LDA Y,TMSBLK
	STA MS.PHR
	LDA Y,TMSBLK+1
	STA MS.PHR+1
	LDY I,0
WRTPHR:
	LDA NY,MS.PHR
	STA MS.KAR
	INY
	LDA NY,MS.PHR
	STA MS.KAR+1
	INY
	LDA NY,MS.PHR
	STA ADL
	INY
	LDA NY,MS.PHR
	STA MS.TRM
	AND I,7F
	STA ADH
	LDA I,<SCRMES-16.*2-1>&0FF
	SEC
	SBC ADL			;SETUP UPSIDE DOWN MESSAGE
	STA AD2L
	BIT SWSTAT
	IFMI			;?MIRRORED?
	EOR I,1F
	STA AD2L
	LDA ADL
	EOR I,1F
	STA ADL
	ENDIF
	LDA I,<SCRMES-16.*2-1>/100&0FF
	SBC ADH
	STA AD2H
	CMP I,5
	IFEQ			;?CENTRAL MESSAGE?
	BIT SWSTAT
	IFVS
	LDA ADL
	SEC
	SBC I,32.*3
	STA ADL
	LDA ADH
	SBC I,0
	STA ADH
	ENDIF
	ENDIF
	LDY I,0			;OFFSET FOR OUTPUT
	BEGIN
	LDA NY,MS.KAR
	INC MS.KAR
	IFEQ
	INC MS.KAR+1
	ENDIF
	LSR			;SAVE TERMINATOR FLAG
				;SET C=D7
	AND MS.MSK		;NOTE:PRESERVE THAT CARRY!
	BIT SWSTAT
	IFPL			;?REGULAR VIEW?
	EOR I,40
	ENDIF
	BIT MS.MSK
	IFVS			;?STORE BOTTOM?
	STA NY,ADL
	ENDIF
	EOR I,0C0
	BIT MS.MSK
	IFMI
	STA NY,AD2L
	ENDIF
	BIT SWSTAT
	IFPL			;?DIRECT VIEW?
	INC ADL
	DEC AD2L
	ELSE			;ELSE MIRRORED
	DEC ADL
	INC AD2L
	ENDIF
	DEC MS.CNT
	IFMI			;?REACHED OUR CHARACTER LIMIT?
	RTS			;THEN EXIT
	ENDIF
				;NOTE:CARRY PRESERVED!
	CSEND			;?LAST CHAR OF THIS STRING?
				;?WAS THAT THE LAST POINTER?
				;THEN EXIT
				;NEXT MESSAGE
		;***
		; RIPOFF PROTECT
	AND I,3F
	CMP I,13
	IFEQ ;? JUST WRITTEN ATARI?
	STA RIP.A ;RECORD IT
	ENDIF
	.GLOBL RIP.4
RIP.4=.
		;***
	LDA MS.TRM
	IFMI
	RTS
	ENDIF
	LDA MS.PHR
	SEC
	ADC I,3			;ADD 4
	STA MS.PHR
	IFCS
	INC MS.PHR+1
	ENDIF
	JMP WRTPHR
	.MACRO .L Z1,Z2,Z3
	MS'Z1''Z2':.ASCPC <Z3>
	.ENDM

	.MACRO .M Z1
	MS.'Z1'=.-TMSBLK/2
	.WORD M.E'Z1'
	.WORD M.F'Z1'
	.WORD M.S'Z1'
	.WORD M.G'Z1'
	.ENDM

	.IRP Z1,<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14>
	LC'Z1'='Z1'.*32.+SCRMES
	.ENDM

	.IRP Z1,<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15>
	CC'Z1'='Z1'.*32.+SCRFLD+16.
	.ENDM

				;MS*123
MSECRD:
.L	F,CRD,<CREDITS>
.L	S,CRD,<CREDITOS>
.L	G,CRD,<KREDITE>
.L	E,GO,<GAME OVER>
.L	F,GO,<FIN DE PARTIE>
.L	S,GO,<JUEGO TERMINADO>
.L	G,GO,<SPIELENDE>
.L	E,IC,<INSERT COINS>
.L	F,IC,<INTRODUIRE LES PIECES>
.L	S,IC,<INSERTE FICHAS>
.L	G,IC,<GELD EINWERFEN>
MSEHS1:
.L	E,1P,<1 PLAYER>
MSFHS1:
.L	F,1P,<1 JOUEUR>
.L	S,1P,<1 JUGADOR>
.L	G,1P,<1 SPIELER>
.L	E,2P,<2 PLAYER>
.L	F,2P,<2 JOUEUR>
.L	S,2P,<2 JUGADOR>
.L	G,2P,<2 SPIELER>
.L	E,3P,<3 PLAYER>
.L	F,3P,<3 JOUEUR>
.L	S,3P,<3 JUGADOR>
.L	G,3P,<3 SPIELER>
.L	E,4P,<4 PLAYER>
.L	F,4P,<4 JOUEUR>
.L	S,4P,<4 JUGADOR>
.L	G,4P,<4 SPIELER>
.L	E,1CP,<1 CREDIT PER PLAYER>
.L	F,1CP,<1 CREDIT PAR JOUEUR>
.L	S,1CP,<1 CREDITO POR JUGADOR>
.L	G,1CP,<1 KREDIT PRO SPIELER>
.L	E,1CG,<1 CREDIT PER GAME>
.L	F,1CG,<1 CREDIT PAR PARTIE>
.L	S,1CG,<1 CREDITO POR PARTIDO>
.L	G,1CG,<1 KREDIT PRO SPIEL>
.L	E,2CG,<2 CREDITS PER GAME>
.L	F,2CG,<2 CREDITS PAR PARTIE>
.L	S,2CG,<2 CREDITOS POR PARTIDO>
.L	G,2CG,<2 KREDITE PRO SPIEL>
.L	E,NXC,<INSERT MORE COINS>
.L	F,NXC,<INTRODUIRE PLUS DE PIECES>
.L	S,NXC,<INSERTE MAS FICHAS>
.L	G,NXC,<MEHR MUENZEN NOETIG>
.L	E,PPS,<PRESS PLAYER START>
.L	F,PPS,<APPUYEZ SUR START>
.L	S,PPS,<PULSAR START>
.L	G,PPS,<STARTKNOPF DRUECKEN>
.L	E,24P,<2 TO 4 PLAYERS>
.L	F,24P,<2 A 4 JOUEURS>
.L	S,24P,<2 O 3 O 4 JUEGOS>
.L	G,24P,<2 BIS 4 SPIELER>
.L	E,BAT,<BATTLE FOR POINTS>
.L	F,BAT,<SE BATTENT POUR POINTS>
.L	S,BAT,<PEGELE PARA PUNTOS>
.L	G,BAT,<KAEMPFE FUER PUNKTE>
.L	E,LVL,<LEVEL>
.L	F,LVL,<NIVEAU>
.L	S,LVL,<NIVEL>
.L	G,LVL,<STUFE>
.L	E,NHS,<NEW HI SCORE>
.L	F,NHS,<NOUVEAU MEILLEUR SCORE>
.L	S,NHS,<NUEVO RECORD>
.L	G,NHS,<NEUES TOP SPIEL>
.L	E,ENT,<ENTER YOUR INITIALS>
.L	F,ENT,<ENTREZ VOS INITIALES>
.L	S,ENT,<ENTRE SUS INICIALES>
.L	G,ENT,<INITIALEN EINGEBEN>
.L	E,HS,<HI SCORE>
.L	F,HSA,<MEILLEUR>	;MEILLEUR SCORE
.L	S,HS,<RECORD>
.L	G,HS,<TOPSPIEL>
MSSHS1:
.L	G,HS1,<SOLO>		;SOLO TOPSPIEL
MSGHS2:
.L	E,HS2,<TEAM>
.L	F,HS2,<EQUIPE>
.L	S,HS2,<EQUIPO>		;RECORD DE EQUIPO
.L	F,HSB,<SCORE>
.L	E,RGA,<ATARI>  ;NOTE: ENDS WITH 27 (CONVERTED TO 13 FOR RIPOFF PROTECT)

.L	E,RGB,<INC>
CKS3:	.BYTE GCKS3
T.=8000
M.EGO:	.WORD MSEGO,LC1-4!8000
M.FGO:	.WORD MSFGO,LC1-6!8000
M.SGO:	.WORD MSSGO,LC1-7!8000
M.GGO:	.WORD MSGGO,LC1-4!8000
M.EGOI:	.WORD MSEGO,LC1-4,MSEIC,LC3-6!8000
M.FGOI:	.WORD MSFGO,LC1-6,MSFIC,LC3-10.!8000
M.SGOI:	.WORD MSSGO,LC1-7,MSSIC,LC3-7!8000
M.GGOI:	.WORD MSGGO,LC1-4,MSGIC,LC3-7!8000
M.ECRD:	.WORD MSECRD,CC4-3!T.
M.FCRD:	.WORD MSFCRD,CC4-3!T.
M.SCRD:	.WORD MSSCRD,CC4-4!T.
M.GCRD:	.WORD MSGCRD,CC4-3!T.
M.E1PC:	.WORD MSE1P,LC1-4,MSE1CG,LC3-8!T.
M.F1PC:	.WORD MSF1P,LC1-4,MSF1CG,LC3-9!T.
M.S1PC:	.WORD MSS1P,LC1-4,MSS1CG,LC3-10.!T.
M.G1PC:	.WORD MSG1P,LC1-4,MSG1CG,LC3-9!T.
M.E2PC:	.WORD MSE2P,LC1-4,MSE1CG,LC3-8!T.
M.F2PC:	.WORD MSF2P,LC1-4,MSF1CG,LC3-9!T.
M.S2PC:	.WORD MSS2P,LC1-4,MSS1CG,LC3-10.!T.
M.G2PC:	.WORD MSG2P,LC1-4,MSG1CG,LC3-9!T.
M.E3PC:	.WORD MSE3P,LC1-4,MSE1CG,LC3-8!T.
M.F3PC:	.WORD MSF3P,LC1-4,MSF1CG,LC3-9!T.
M.S3PC:	.WORD MSS3P,LC1-4,MSS1CG,LC3-10.!T.
M.G3PC:	.WORD MSG3P,LC1-4,MSG1CG,LC3-9!T.
M.E4PC:	.WORD MSE4P,LC1-4,MSE1CG,LC3-8!T.
M.F4PC:	.WORD MSF4P,LC1-4,MSF1CG,LC3-9!T.
M.S4PC:	.WORD MSS4P,LC1-4,MSS1CG,LC3-10.!T.
M.G4PC:	.WORD MSG4P,LC1-4,MSG1CG,LC3-9!T.
M.E1PD:	.WORD MSE1P,LC1-4,MSE2CG,LC3-9!T.
M.F1PD:	.WORD MSF1P,LC1-4,MSF2CG,LC3-10.!T.
M.S1PD:	.WORD MSS1P,LC1-4,MSS2CG,LC3-11.!T.
M.G1PD:	.WORD MSG1P,LC1-4,MSG2CG,LC3-9!T.
M.E2PD:	.WORD MSE2P,LC1-4,MSE2CG,LC3-9!T.
M.F2PD:	.WORD MSF2P,LC1-4,MSF2CG,LC3-10.!T.
M.S2PD:	.WORD MSS2P,LC1-4,MSS2CG,LC3-11.!T.
M.G2PD:	.WORD MSG2P,LC1-4,MSG2CG,LC3-9!T.
M.E3PD:	.WORD MSE3P,LC1-4,MSE2CG,LC3-9!T.
M.F3PD:	.WORD MSF3P,LC1-4,MSF2CG,LC3-10.!T.
M.S3PD:	.WORD MSS3P,LC1-4,MSS2CG,LC3-11.!T.
M.G3PD:	.WORD MSG3P,LC1-4,MSG2CG,LC3-9.!T.
M.E4PD:	.WORD MSE4P,LC1-4,MSE2CG,LC3-9!T.
M.F4PD:	.WORD MSF4P,LC1-4,MSF2CG,LC3-10.!T.
M.S4PD:	.WORD MSS4P,LC1-4,MSS2CG,LC3-11.!T.
M.G4PD:	.WORD MSG4P,LC1-4,MSG2CG,LC3-9.!T.
M.E1AC:	.WORD MSE1P,LC1-4,MSE2CG,LC3-9,MSENXC,LC5-8!T.
M.F1AC:	.WORD MSF1P,LC1-4,MSF2CG,LC3-10.,MSFNXC,LC5-12.!T.
M.S1AC:	.WORD MSS1P,LC1-4,MSS2CG,LC3-11.,MSSNXC,LC5-9.!T.
M.G1AC:	.WORD MSG1P,LC1-4,MSG2CG,LC3-9,MSGNXC,LC5-9.!T.
M.E2AC:	.WORD MSE2P,LC1-4,MSE2CG,LC3-9,MSENXC,LC5-8!T.
M.F2AC:	.WORD MSF2P,LC1-4,MSF2CG,LC3-10.,MSFNXC,LC5-12.!T.
M.S2AC:	.WORD MSS2P,LC1-4,MSS2CG,LC3-11.,MSSNXC,LC5-9.!T.
M.G2AC:	.WORD MSG2P,LC1-4,MSG2CG,LC3-9,MSGNXC,LC5-9.!T.
M.E9AC:	.WORD MSE24P,LC1-7,MSE2CG,LC3-9,MSENXC,LC5-8!T.
M.F9AC:	.WORD MSF24P,LC1-6,MSF2CG,LC3-10.,MSFNXC,LC5-12.!T.
M.S9AC:	.WORD MSS24P,LC1-7,MSS2CG,LC3-11.,MSSNXC,LC5-9.!T.
M.G9AC:	.WORD MSG24P,LC1-7,MSG2CG,LC3-9,MSGNXC,LC5-9.!T.
M.E24U:	.WORD MSE24P,LC1-7
M.E1UP:	.WORD MSE1CP,LC3-9!T.
M.F24U:	.WORD MSF24P,LC1-6
M.F1UP:	.WORD MSF1CP,LC3-9!T.
M.S24U:	.WORD MSS24P,LC1-7
M.S1UP:	.WORD MSS1CP,LC3-10.!T.
M.G24U:	.WORD MSG24P,LC1-7
M.G1UP:	.WORD MSG1CP,LC3-10.!T.
M.E1PB:	.WORD MSE1P,LC1-4,MSEBAT,LC3-8!T.
M.F1PB:	.WORD MSF1P,LC1-4,MSFBAT,LC3-11.!T.
M.S1PB:	.WORD MSS1P,LC1-4,MSSBAT,LC3-9!T.
M.G1PB:	.WORD MSG1P,LC1-4,MSGBAT,LC3-9!T.
M.E2PB:	.WORD MSE2P,LC1-4,MSEBAT,LC3-8!T.
M.F2PB:	.WORD MSF2P,LC1-4,MSFBAT,LC3-11.!T.
M.S2PB:	.WORD MSS2P,LC1-4,MSSBAT,LC3-9!T.
M.G2PB:	.WORD MSG2P,LC1-4,MSGBAT,LC3-9!T.
M.E1BG:	.WORD MSE1P,LC1-4,MSEPPS,LC3-9!T.
M.F1BG:	.WORD MSF1P,LC1-4,MSFPPS,LC3-8!T.
M.S1BG:	.WORD MSS1P,LC1-4,MSSPPS,LC3-6!T.
M.G1BG:	.WORD MSG1P,LC1-4,MSGPPS,LC3-9!T.
M.EBGN:	.WORD MSEPPS,LC3-9!T.
M.FBGN:	.WORD MSFPPS,LC3-8!T.
M.SBGN:	.WORD MSSPPS,LC3-6!T.
M.GBGN:	.WORD MSGPPS,LC3-9!T.
M.ELVL:	.WORD MSELVL,CC4-2!T.
M.FLVL:	.WORD MSFLVL,CC4-3!T.
M.SLVL:	.WORD MSSLVL,CC4-2!T.
M.GLVL:	.WORD MSGLVL,CC4-2!T.
M.ENAM:	.WORD MSENHS,LC1-6,MSEENT,LC3-9!T.
M.FNAM:	.WORD MSFNHS,LC1-11.,MSFENT,LC3-10.!T.
M.SNAM:	.WORD MSSNHS,LC1-6,MSSENT,LC3-9!T.
M.GNAM:	.WORD MSGNHS,LC1-7,MSGENT,LC3-9!T.
M.EHS1:	.WORD MSEHS1,LC9-4,MSEHS,LC10-4!T.
M.FHS1:	.WORD MSFHS1,LC8-4,MSFHSA,LC9-4,MSFHSB,LC10-2!T.
M.SHS1:	.WORD MSSHS,LC9-3,MSSHS1,LC10-2!T.
M.GHS1:	.WORD MSGHS1,LC9-2,MSGHS,LC10-4!T.
M.EHS2:	.WORD MSEHS2,LC9-2,MSEHS,LC10-4!T.
M.FHS2:	.WORD MSFHS2,LC8-3,MSFHSA,LC9-4,MSFHSB,LC10-2!T.
M.SHS2:	.WORD MSSHS,LC9-3,MSSHS2,LC10-3!T.
M.GHS2:	.WORD MSGHS2,LC9-2,MSGHS,LC10-4!T.
M.EREG:
M.FREG:
M.SREG:
M.GREG:	.WORD MSERGA,CC0-1,MSERGB,CC1!T.
TMSBLK:				;MS.123
.M	GO
.M	GOI
.M	1PC
.M	2PC
.M	3PC
.M	4PC
.M	1PD
.M	2PD
.M	3PD
.M	4PD
.M	1UP
.M	24U
.M	1AC
.M	2AC
.M	9AC
.M	1PB
.M	2PB
.M	BGN
.M	1BG
.M	HS1
.M	HS2
.M	NAM
.M	REG
.M	CRD
.M	LVL
VALLVL:			;AWARD POINTS FOR LEVEL ATTAINED
	LDA X,TPADSW
	AND PLAYER
	IFNE
	LDY I,50
	LDA I,0
	JSR VALADD
	ENDIF
	RTS
VALBRK:				;GIVE POINTS FOR HITTING BRICKS
	LDA X,BL.FLG
	BIT BIT04
	BNE 10$			;?NOT PADDLE OWNED?
	RTS			;NOT OWNED-RETURN NO POINTS
10$:
	AND I,3
	TAX
	LDA X,TPADSW
	AND PLAYER
	IFEQ
90$:
	RTS			;DRONES DO NOT GET POINTS
	ENDIF
	LDY I,1
	LDA I,25		;BRICK HIT==>125 POINTS
	JMP VALADD

VALCSL:				;VALUE FOR KILLING CASTLE
	LDX CL.BNM
	LDA X,BL.FLG
	BIT BIT04
	IFNE ;?OWNED BY A PADDLE?
	AND I,3
	TAX
	LDA X,TPADSW
	AND PLAYER
	IFNE			;?PLAYER GETTING POINTS?
				;DRONES DO NOT GET POINTS
	LDY CL.PNM
	LDA Y,TPADSW
	AND PLAYER
	IFNE			;?PLAYER DIE?
	LDY I,10		;AWARD 1000 POINTS
	ELSE			;ELSE DRONE DIED
	LDY I,25		;AWARD 2500 POINTS
	ENDIF
	LDA I,0
	JSR VALADD
	ENDIF
	ENDIF
	RTS

VALADD:			;ADD (Y,A) TO SCORE BUCKET
	BIT ATRACT
	IFMI			;?GAME IN PROGRESS?
	SED			;*S*
	CLC
	ADC X,SBUK12		;A=LOW TWO DIGITS
	STA X,SBUK12
	TYA			;Y=MIDDLE 2 DIGITS
	ADC X,SBUK34
	STA X,SBUK34
	IFCS			;?OVERFLOWED THE BUCKET?
	LDA I,0			;THEN ADD NOW TO SCORE
	ADC X,SCOR56
	STA X,SCOR56
	CLC
	LDA I,1
	ADC SCOR56+4		;CUMULATIVE SCORE
	STA SCOR56+4
	ENDIF
	CLD			;*S*
	ENDIF
	RTS
VALROL:			;ROLL UP THE SCORES
	LDX I,3
	BEGIN			;LOOP THRU BUCKETS/CASTLES
	LDA X,SBUK12
	ORA X,SBUK34
	IFNE			;?GOT SOME SCORE TO ROLL IN?
	SED			;*S*
	LDY I,1			;ROLL IN SLOWLY
	LDA X,SBUK34
	IFNE			;?FAIRLY FAR AWAY?
	LDY I,23
	ENDIF
	AND I,0F0
	IFNE			;?VERY FAR AWAY?
	LDY I,97
	ENDIF
	TYA
	STA J
	CLC			;ADD TO SCORE
	ADC X,SCOR12
	STA X,SCOR12
	LDA I,0
	ADC X,SCOR34
	STA X,SCOR34
	LDA I,0
	ADC X,SCOR56
	STA X,SCOR56
	LDA J			;ADD TO CUMULATIVE SCORE
	CLC
	ADC SCOR12+4
	STA SCOR12+4
	LDA I,0
	ADC SCOR34+4
	STA SCOR34+4
	LDA I,0
	ADC SCOR56+4
	STA SCOR56+4
	LDA X,SBUK12		;SUB FROM THE BUCKET
	SEC
	SBC J
	STA X,SBUK12
	LDA X,SBUK34
	SBC I,0
	STA X,SBUK34
	CLD			;*S*
	ENDIF
	DEX
	MIEND			;NEXT PLAYER'S SCORE BUCKET
	RTS
TSTHI:			;TEST FOR NEW HI SCORE
	LDA LF.DRN
	CMP I,2
	IFCC			;?3 OR 4 PLAYER?
	RTS			;THEN NO NEW SCORE
	ENDIF
	IFEQ			;?TWO PLAYER?
	LDX I,6
	ELSE			;ELSE ONE PLAYER
	LDX I,5
	ENDIF
	LDA X,SCOR12
	CMP SCOR12+4
	LDA X,SCOR34
	SBC SCOR34+4
	LDA X,SCOR56
	SBC SCOR56+4
	IFCC			;?NEW HI SCORE?
	LDA SCOR12+4
	STA X,SCOR12
	LDA SCOR34+4
	STA X,SCOR34
	LDA SCOR56+4
	STA X,SCOR56
	LDA I,10
	STA PHASE
	LDA I,0FF
	STA PAUSTM
	JSR SNDFAN
	ENDIF
	RTS
DRWHIA:			;ALTERNATE 1,2 PLAYER DISPLAYS
				;DRAW RESULT
	LDA HS.DHI
	IFNE			;?TWO PLAYER DISPLAYED?
DRWHI1:	LDA I,0			;THEN SWITCH TO ONE PLAYER
	STA HS.DHI
	LDX I,3			;3 INITIALS WHEN FLIPPED GIVE 4 POSITIONS
	BEGIN
	STA X,28.*32.+14.+SCRFLD
	DEX
	MIEND
	LDY I,MS.HS2		;CLEAR OUT POSSIBLE 2 PLAYER
	JSR CLRMSB
	ELSE			;ELSE SWITCH TO TWO PLAYER
DRWHI2:	LDA I,0FF
	STA HS.DHI		;(<>)==>2 PLAYER
	LDY I,MS.HS1
	JSR CLRMSB
	ENDIF
DRWHI:	BIT HS.DHI
	IFVS			;?TWO PLAYER?
	LDY I,MS.HS2
	JSR WHLMSB
	LDY I,6			;TWO PLAYER HI VALUE
	ELSE			;ELSE ONE PLAYER
	LDY I,MS.HS1
	JSR WHLMSB
	LDY I,5
	ENDIF
	LDX I,4
	JSR VALWRT
DRWHNM:	BIT HS.DHI
	IFVS			;?TWO PLAYER?
	LDX I,4
	LDY I,0
	JSR SHWNAM
	LDY I,1
	ELSE
	LDX I,1
	LDY I,0
	ENDIF
	JSR SHWNAM
	RTS
SHWNAM:			;X-->INITIALS ARRAY
				;Y-->ADL,ADH,FLIP
	LDA Y,TSHADL
	STA ADL
	LDA Y,TSHADH
	STA ADH
	LDY I,0F		;WRITE FORWARDS WITH OFFSET
	BIT SWSTAT
	IFMI			;?REFLECTED?
	LDY I,12
	ENDIF
	LDA I,2
	STA J
	BEGIN
	LDA X,HS.CHR
	INY
	BIT SWSTAT
	IFMI			;?REFLECTED?
	EOR I,40
	DEY
	DEY			;REVERSE DIRECTION
	ENDIF
	STA NY,ADL
	INX			;NEXT CHAR IN NAME
	DEC J
	MIEND
	RTS
	.SWORD
	.SPLIT 27.*32.+15.+SCRFLD-10	;TWO PLAYER, FIRST INITIAL
	.SPLIT 28.*32.+15.+SCRFLD-10	;TWO PLAYER, SECOND INITIAL
TSHADL:	.DMPL
TSHADH:	.DMPH
SHOWVL:				  ;SHOW OUR CURRENT SCORE VALUES
	LDA LF.DRN
	CMP I,2
	IFCS			;?1 OR 2 PLAYERS?
	LDX I,3
	STX CL.PNM
	BEGIN
	LDX CL.PNM
	LDA X,TPADSW
	AND PLAYER
	IFNE			;?PLAYER ACTIVE?
	LDA X,XP.FLG
	IFPL			;?NOT EXPLOSION?
	LDY CL.PNM
	JSR VALWRT
	ENDIF
	ENDIF
	DEC CL.PNM
	MIEND
	ENDIF
	RTS

VALWRT:				;X:=SCREEN LOCATION INDEX
				;Y:=SCORE INDEX

	LDA I,0FF		;ZERO SUPPRESS
	STA J
	CPX I,4
	IFCS			;?NON CASTLE SCORES?
	LDA I,0FF		;+1==>BLANK
	ELSE			;ELSE CASTLE SCORE
	LDA X,PD.FLG
	IFMI			;?CASTLE COURTYARD?
	LDA I,39-1		;COURTYARD
	ELSE			;ELSE EMPTY
	LDA I,3A-1		;EMPTY ZERO FILL
	ENDIF
	ENDIF
	STA K
	LDA X,TVLADL		 ;C SCREEN DISPLAY ADDRESS
	STA ADL
	LDA X,TVLADH
	STA ADH
	TYA
	BIT SWSTAT
	IFPL			;?DIRECT VIEW?
	LDY X,TVLDIR		 ;C DIRECTION AND FLIP
	ELSE			;ELSE REFLECTED VIEW
	LDY I,16
	ENDIF
	TAX
	LDA X,SCOR56		 ;C HI BYTE
	JSR BCDSC		 ;C CONVERT BCD TO SCORE DISPLAY
	LDA X,SCOR34
	JSR BCDSC
	LDA X,SCOR12
	JSR BCDSZ
	RTS
;VALUE STARTING LOCS
	.SWORD
	.SPLIT SCRFLD+380-10	;PLAYER A
	.SPLIT SCRFLD+39A-10	;PLAYER B
	.SPLIT SCRFLD+20-80	;PLAYER C
	.SPLIT SCRFLD+3A-80	;PLAYER D
	.SPLIT 26.*32.+0D+SCRFLD-10	;TWO PLAYER HI SCORE
TVLADL:	.DMPL
TVLADH:	.DMPH
TVLDIR:			;DIRECTION, FLIP FLAG, AND ALLOWS FOR PRE-INC/DEC
TLFDIR=TVLDIR
	.BYTE 0F
	.BYTE 0F
	.BYTE 86
	.BYTE 86
	.BYTE 0F


	.SWORD
	.SPLIT SCRFLD+3A0-10
	.SPLIT SCRFLD+3BA-10
	.SPLIT SCRFLD+0-80
	.SPLIT SCRFLD+1A-80
TLFADL:	.DMPL
TLFADH:	.DMPH
CREDRW:			;DISPLAY CREDITS
	LDY I,MS.CRD
	JSR WHLMSB
	LDA $$CRDT
	JSR BINCNV
	STA 5*32.+16.+SCRFLD
	STY 5*32.+15.+SCRFLD
	RTS
LIFINC:
				;ADD A LIFE
	LDA X,LF.NUM
	BMI 10$
	CMP I,5
	IFCC			;?LESS THAN 5 LIVES?
10$:
	INC X,LF.NUM
	ENDIF
	JSR LIFDRW
	RTS
LVDRW:			;DRAW ALL PLAYER'S LIVES
	LDX I,3
	BEGIN
	LDA X,TPADSW
	AND PLAYER
	IFNE			;ONLY DRAW LIVES OF PLAYERS
	JSR LIFDRW
	ENDIF
	DEX
	MIEND
	RTS
LIFDRW:			;DRAW LIVES
	LDA X,XP.FLG
	IFPL			;?NO EXPLOSOIN IN PROGESS?
	LDA X,LF.NUM
	IFPL			;?ANY LIVES TO DISPLAY?
	STA K
	LDA I,5			;BASE 0, 6 LIVES MAX
	STA J
	LDA X,TLFADL		;SCREEN ADDRESS
	STA ADL
	LDA X,TLFADH
	STA ADH			;NEW LIFE SYMBOL
	LDA I,6E
	EOR X,TDFLP
	BIT SWSTAT
	IFPL			;?DIRECT VIEW?
	LDY X,TLFDIR
	ELSE			;ELSE REFLECTED VIEW
	LDY I,16
	EOR I,0
	ENDIF
				;MAX LIVES DISPLAYED
	BEGIN			;LOOP THRU EACH POSITION
	CPY I,80
	BIT SWSTAT
	IFMI			;?REFLECTED VIEW?
	SEC			;REVERSE DIRECTION
	ENDIF
	IFCS
	DEY
	ELSE
	INY
	ENDIF
	STA NY,ADL
	DEC K			;CYCLE THRU ALL SLOTS
	IFMI			;?DONE WITH TROPHYS?
	LDA X,PD.FLG
	IFMI			;?COURTYARD FILL?
	LDA I,39
	ELSE			;ELSE BLANK
	LDA I,3A		;
	ENDIF
	ENDIF
	DEC J			;FILL ALL SPOTS
	MIEND
	ENDIF
	ENDIF
	RTS
LIFGON:
	LDX CL.PNM
	LDA I,10
	STA X,PD.FLG		;CASTLE COST A LIFE
	LDA X,TPADSW
	BIT PLAYER
	IFEQ			;?IS THIS A DRONE?
	DEC LF.DRA		;RECORD DRONES DEATH
	IFEQ			;?ALL DRONES KILLED?
	LDA LF.DRN
	CMP I,2
	IFCS			;?1 OR 2 PLAYER?
	LDY I,MS.LVL
	JSR WHLMSB
	LDA LV.CUR
	JSR BINCNV
	STA 5*32.+16.+SCRFLD
	STY 5*32.+15.+SCRFLD
	ENDIF
	ENDIF
	ELSE			;ELSE PLAYER DIED
	DEC LF.PLA		;RECORD PLAYER'S DEATH
	ENDIF
	LDA LF.PLA
	IFEQ
	JSR GAMEND
	ELSE
	CMP I,1
	IFEQ			;?ONLY ONE PLAYER LEFT?
	LDA LF.DRA
	IFEQ			;?AND ALL DRONES GONE?
	LDA LF.DRN
	CMP I,2
	IFCS			;?ONE OR TWO PLAYER?
	JSR ACTEND		;AWARD ANOTHER HEAT
	ELSE			;ELSE TOO MANY PLAYERS
	JSR GAMEND		;KILL THE GAME
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	RTS
ACTEND:
	JSR KILBAL
	LDA I,0C		;ACT EXIT
	STA PHASE
	LDX I,3
	STX CL.PNM
	BEGIN ;LOOP THRU ALL CASTLES
	LDX CL.PNM
	LDA X,PD.FLG
	IFMI ;?PLAYER STILL ALIVE?
	STX LV.PNM		;SAVE LAST LIVE PLAYER
	JSR LIFINC
	ENDIF
	DEC CL.PNM
	MIEND
	RTS
GAMEND:
	JSR KILBAL
	JSR LEDOFF
	LDA I,0FF
	STA PAUSTM
	LDA I,0A		;EXIT GAME
	STA PHASE
	RTS
				;---
				;A:=RIGHT CHAR
				;Y:=LEFT CHAR
BINCNV:				;BINARY CONVERT
	LDY I,03F		;PRE SLIP TENS DIGITS FOR DIRECT VIEWING
	CMP I,10.
	IFCS			;?(>=10.)==>PROCESS TENS DIGITS
	INY			;GRAPHIC '1' AT LOC 2
	ENDIF
	SEC
	BEGIN
	INY
	;[SEC]			
	SBC I,10.
	CCEND
	;[CLC]
	ADC I,40+10.+1		;FLIP+EXTRA LOOP+GRAPHIC '1'
	BIT SWSTAT
	IFMI			;?MIRROR?
	EOR I,40		;FLIP FOR BACKWARDS VIEW
	STA J			;WRITE ON LEFT
	TYA
	LDY J			;Y:=LEFTMOST DIGIT
	EOR I,40		;A:=RIGHTMOST DIGIT
	ENDIF
	RTS
BCDSC:		;CONVERT BCD TO DISPLAY SCORE
	PHA	;C SAVE VALUE
	LSR
	LSR
	LSR
	LSR	; OBTAIN HI NYB
	IFNE			;?NOT A ZERO?
	INC J			;TURN OFF ZERO SUPPRESS
	ENDIF
	BIT J
	IFMI			;?STILL ZERO SUPPRESS?
	LDA K
	ENDIF
	CLC
	ADC I,41	;C COMPENSATE FOR PICTURE ROM, ZERO AT LOC 1.
	CPY I,80
	BIT SWSTAT
	IFMI			;?REFLECTED?
	EOR I,080		;PRE-UP FIP
	SEC
	ENDIF
	IFCS	;?TOP OF SCREEN WRITE?
	EOR I,0C0	;THEN FLIP AND WRITE BACKWARDS
	DEY
	ELSE ;ELSE ON BOTTOM OF SCREEN
	INY
	ENDIF
	STA NY,ADL ;C PUT CHAR ONTO SCREEN
	PLA	;C DO LOW NYB
	AND I,0F
	IFNE			;?NOT A ZERO?
	INC J			;TURN OFF ZERO SUPPRESS
	ENDIF
	BIT J
	IFMI			;?STILL ZERO SUPPRESS?
	LDA K
	ENDIF
	CLC
	ADC I,41
	CPY I,80 ;C CHECK FOR ORIENTATION
	BIT SWSTAT
	IFMI			;?REFLECTED?
	EOR I,80		;PRE-UP FLIP
	SEC
	ENDIF
	IFCS	;?WRITE UPSIDE DOWN?
	EOR I,0C0	;THEN FLIP AND WRITE TO LEFT
	DEY
	ELSE	;ELSE WRITE TO RIGHT
	INY
	ENDIF
	STA NY,ADL ;C PUT CHAR AWAY ONTO SCREEN
	RTS

BCDSZ:			;REPLACE A ZERO
	JSR BCDSC
	LDA J
	IFMI			;?ALL ZERO SUPPRESSED
	LDA I,1
	STA NY,ADL
	ENDIF
	RTS
RSF:				;RESET SCREEN FIELD
	LDA I,0
	TAX
	BEGIN
	STA X,SCRFLD
	STA X,SCRFLD+100
	STA X,SCRFLD+200
	STA X,SCRFLD+300
	DEX
	EQEND
	RTS
DRPIC:
	LDX CL.PNM
	LDA X,TDADL		;C SCREEN LOC FOR THIS PLAYER
	STA ADL
	LDA X,TDADH
	STA ADH
	LDA X,TDCLM
	STA DR.CLM
	LDA X,TDROW
	STA DR.ROW
	LDA X,TDFLP
	STA DR.FLP
	LDX Y,TDPTR		;C START OF NEW PIC
	LDA X,TDPIC
	STA DR.RNM		;C ROW NUMBER-VAR
	STA DR.CNM		;C COLUMN#-CONST
	LDA I,0
	STA L			;
	BEQ 10$
	BEGIN			;LOOP THRU EACH ROW
	LDA ADL
	CLC
	ADC DR.ROW
	STA ADL
	LDA DR.ROW
	IFCS
	IFPL
	INC ADH
	ENDIF
	ELSE
	IFMI
	DEC ADH
	ENDIF
	ENDIF
10$:
	LDA ADL			;C SETUP INDIRECT ADDRESS
	STA AD2L
	LDA ADH
	STA AD2H
	LDA DR.CNM		;C COLUMN OR CHAR COUNT PER ROW
	STA J
	LDY I,0
	BEQ 20$
	BEGIN			;LOOP THRU ROW CHARS
	LDA DR.CLM
	IFMI
	LDA AD2L
	IFEQ
	DEC AD2H
	ENDIF
	DEC AD2L
	ELSE
	INC AD2L
	IFEQ
	INC AD2H
	ENDIF
	ENDIF
20$:
	LDA L			;LOOP COUNT FOR CHAR INPUT
	IFEQ			;?END OF THIS SERIES?
	INX			;MOVE TO NEXT LEADER
	LDA X,TDPIC
	STA L
	IFMI			;?REPEAT FOLLOWING CHAR?
	INX			;PREPARE TO ACCESS CHAR
	ENDIF
	ENDIF
	LDA L			;LOOP COUNT MAY HAVE BEEN UPDATED
	IFPL			;?OUTPUT A SERIES?
	DEC L			;REDUCE LOOP COUNT
	INX			;ACCESS FOLLOWING CHAR
	ELSE			;ELSE NEGATIVE COUNT
	INC L			;REDUCE LOOP COUNT
	ENDIF
	LDA X,TDPIC
	EOR DR.FLP
	STA NY,AD2L
	DEC J
	EQEND
	DEC DR.RNM
	EQEND
	RTS
CKS4:	.BYTE GCKS4
	.SWORD
	.SPLIT M.BASE-32.
	.SPLIT M.BASE-1
	.SPLIT SCRFLD
	.SPLIT SCRFLD+31.
TDADL:	.DMPL
TDADH:	.DMPH
TDCLM:	.BYTE 1,-1,1,-1
TDROW:	.BYTE -32.,-32.,32.,32.
TDFLP:	.BYTE 0,40,80,0C0
TDPTR:	.BYTE TDNIT-TDPIC
	.BYTE TDCRN-TDPIC
	.BYTE TDMTY-TDPIC
	.BYTE TDBLK-TDPIC
	.BYTE TDCLD1-TDPIC
	.BYTE TDCLD2-TDPIC
	.BYTE TDCLD3-TDPIC
	.BYTE TDCLD4-TDPIC
	.BYTE TDBAD-TDPIC
DR.WLL	=0		;CASTLE WALL, DRONE INSIDE
DR.KNG	=1			;PLAYERS KING CROWN
DR.MTY	=2			;EMPTY-BACKGROUND
DR.BLN	=3			;BLINK A BLANK COURTYARD
DR.CL1	=4			;CLOUD 1 SMALLEST
DR.CL2	=5			;CLOUD 2 SMALL
DR.CL3	=6			;CLOUD 3 LARGE
DR.CL4	=7			;CLOUD 4 LARGEST
DR.BDU	=8			;BAD GUY DRONE FOR UPRIGHT
TDPIC:
TDNIT:	.BYTE 10.		;INIT, KNIGHT
	.BYTE -6.,39,44.,3F,3F,7D,3E
	.BYTE 39,39,39,39,39,39,3F,3F,0FD,3E
	.BYTE 39,37,38,78,77,39,3F,3F,3E,0
	.BYTE 39,35,36,76,75,39,3F,3F,7D,3E
	.BYTE 39,39,34,74,39,39,3F,3F,0FD,3E
	.BYTE -6,39,4.,3F,3F,3E,0
	.BYTE -8,3F,2.,7D,3E
	.BYTE -8,3F,22.,0FD,3E
	.BYTE 0BD,0FD,0BC,0BD,0FD,0BC,0BD,0FD,0BB,0
	.BYTE 0BC,0BC,0,0BC,0BC,0,0BC,0BC,0,0
TDCRN:				;CROWN
	.BYTE 6			;CROWN
	.BYTE -13.,39,16.,32,33,73,72,39
	.BYTE 39,30,31,71,70,39
	.BYTE 39,39,2F,6F,39
	.BYTE -7.,39
				;*SOUNDS
TDMTY:	.BYTE 6			;EMPTY
	.BYTE -36.,3A
	
TDBLK:	.BYTE 5			;BLANK
	.BYTE -25.,39
	
TDBAD:			;BAD GUY
	.BYTE 5.
	.BYTE -5.,39
	.BYTE 20.,39,39,39,39,39
	.BYTE 39,39,0B4,0F4,39
	.BYTE 39,0B5,0B6,0F6,0F5
	.BYTE 39,0B7,0B8,0F8,0F7
TDCLD1:	.BYTE 2			;CLOUD1 - 2X2
	.BYTE 4.,27,28
	.BYTE 25,26
	
TDCLD2:	.BYTE 3			;CLOUD2 - 3X3
	.BYTE 9.,68,0A9,67
	.BYTE 2A,2D,6A
	.BYTE 66,29,65
	
TDCLD3:	.BYTE 4			;CLOUD3 - 4X4
	.BYTE 16.,27,0A9,0A9,28
	.BYTE 2A,0AB,0AC,6A
	.BYTE 2A,6C,6B,6A
	.BYTE 25,29,29,26
	
TDCLD4:	.BYTE 5			;CLOUD4 - 5X5
	.BYTE 25.,0A5,0A9,0A9,0A9,0A6
	.BYTE 0AA,0EC,0AD,0EB,0EA
	.BYTE 0AA,0AD,0AD,0AD,0EA
	.BYTE 0AA,2B,0AD,2C,0EA
	.BYTE 0A7,29,29,29,0A8
	
SNDLBL:				;LAUNCH BALL
	LDY I,2F
	BNE SNDJMP		;J
SNDWBX:	LDY I,0F		;WALL BOUNCE, X SIDES
	BNE SNDWB2
SNDWBY:	LDY I,17		;WALL BOUNCE, Y SIDES
SNDWB2:	LDA PK.PNT+3		;CHANNEL 2
	IFEQ			;?CHANNEL FREE?
	JSR SNDON
	ENDIF
	LDX CL.BNM		;RESTORE REG
	RTS
SNDTIK:
SNDPHT:		;PADDLE HIT
	LDY I,7
	BNE SNDJMP		;J
SNDCEX:	LDY I,1F
	JSR SNDON
SNDCSN:				;NEW CASTLE
SNDCOIN:			;COIN ADDED
SNDCBH:				;CASTLE BRICK HIT
	LDY I,37
	JSR SNDON
	LDX CL.BNM
	RTS
				;CASTLE EXPLODE
SNDFAN:
SNDACT:
SNDSGM:		;START GAME
	LDY I,27
SNDJMP:	JMP SNDON
POSDIS:				;POSITION TO DISPLAY CONVERT
	LDX I,MOTNUM-1
	BEGIN
	SEI			;** PREVENT INCOMPLETE MOTION OBJECT UPDATE
	LDA X,HPOSH
	STA X,HORDIS		;SAVE THE HORIZONTAL LOCATION ON THE DISPLAY
				;---
	LDA X,VPOSH		;DO THE
	STA X,VERDIS		;VERTICAL
	LDA X,SPIC
	STA X,SVBPIC
	CLI			;**
	DEX			;DO THE NEXT OBJECT
	MIEND
				;---
	RTS
	.END


                                                                                                                                                                                                                                                                                                                                                                               